Great—here are clean, drop-in replacements for the functions we touched. Paste these over your existing defs in the noted files.

---

### `ox-astro-helpers.el`

```elisp
;;; --- Drop-in: safe exporter for snippet preflight ---

(defun org-astro--safe-export (data info)
  "Like `org-export-data' but never throws. Falls back to readable plain text."
  (condition-case _
      (org-trim (org-export-data data info))
    (error
     (let* ((s (org-no-properties (org-element-interpret-data data))))
       ;; [[url][desc]] -> desc, [[url]] -> url
       (setq s (replace-regexp-in-string "\\[\\[\\([^]]+\\)\\]\\[\\([^]]+\\)\\]\\]" "\\2" s))
       (setq s (replace-regexp-in-string "\\[\\[\\([^]]+\\)\\]\\]" "\\1" s))
       ;; Drop common inline markup and collapse whitespace/newlines
       (setq s (replace-regexp-in-string "[*_~/=]" "" s))
       (string-trim (replace-regexp-in-string "\n+" " " s))))))
```

```elisp
;;; --- Drop-in: resilient link translator ---

(defun org-astro-link (link desc info)
  "Transcode a LINK object for Astro MDX, robust to partial INFO during preflight."
  (let* ((type (org-element-property :type link))
         (path (org-element-property :path link)))
    (cond
     ;; Internal target (fuzzy) → local anchor; degrade gracefully if INFO is partial
     ((and (string= type "fuzzy") (not (string-match-p "://" path)))
      (let* ((resolved-title
              (condition-case _
                  (let* ((target (and (plist-get info :parse-tree)
                                      (org-export-resolve-fuzzy-link link info))))
                    (and target (org-element-property :raw-value target)))
                (error nil)))
             (text (or desc resolved-title path))
             (slug (org-astro--slugify text)))
        (format "[%s](#%s)" text slug)))

     ;; Bare URLs with no description → LinkPeek + set import flag
     ((and (null desc) (member type '("http" "https" "ftp" "mailto")))
      ;; Use SETF so the plist is actually mutated even if the key is new
      (setf (plist-get info :astro-uses-linkpeek) t)
      (format "<LinkPeek href=\"%s\"></LinkPeek>"
              (or (org-element-property :raw-link link)
                  (concat type ":" path))))

     ;; Everything else → prefer org's MD translator; fall back to plain Markdown
     (t
      (let ((md (when (fboundp 'org-md-link)
                  (ignore-errors (org-md-link link desc info)))))
        (or md
            (let* ((raw (or (org-element-property :raw-link link)
                            (concat type ":" path)))
                   (text (or desc raw)))
              (format "[%s](%s)" text raw))))))))
```

```elisp
;;; --- Drop-in: heading translator using safe export ---

(defun org-astro-heading (heading contents info)
  "Transcode a HEADING for Astro MDX. Uses safe export to avoid preflight crashes."
  (let* ((title (org-astro--safe-export
                 (org-element-property :title heading)
                 ;; Avoid smart quotes in headings unless explicitly enabled
                 (plist-put (copy-plist info) :with-smart-quotes nil)))
         (level (+ (org-element-property :level heading)
                   (or (plist-get info :headline-offset) 0)))
         (level (min (max level 1) 6))
         (header (concat (make-string level ?#) " " title)))
    (concat header "\n\n" (or contents ""))))
```

---

### `ox-astro.el`

```elisp
;;; --- Drop-in: compute a robust TITLE ---

(defun org-astro--get-title (tree info)
  "Return a title string from TREE/INFO, never nil."
  (or
   ;; Explicit #+TITLE first
   (let ((kw (org-element-map tree 'keyword
               (lambda (k)
                 (when (string-equal "TITLE" (org-element-property :key k)) k))
               nil 'first-match)))
     (when kw (org-element-property :value kw)))
   ;; Else first headline, safely exported
   (let ((hl (org-element-map tree 'headline 'identity nil 'first-match)))
     (when hl
       (org-astro--safe-export (org-element-property :title hl) info)))
   ;; Fallback
   "Untitled Post"))
```

```elisp
;;; --- Drop-in: compute a robust EXCERPT ---

(defun org-astro--get-excerpt (tree info)
  "Return an excerpt string from TREE/INFO, possibly empty but never nil."
  (or
   ;; Prefer explicit #+ASTRO_EXCERPT or #+EXCERPT
   (let ((kw (org-element-map tree 'keyword
               (lambda (k)
                 (when (member (org-element-property :key k)
                               '("ASTRO_EXCERPT" "EXCERPT"))
                   k))
               nil 'first-match)))
     (when kw
       (let* ((v (org-element-property :value kw)))
         (string-trim (replace-regexp-in-string "[*_/]" "" v)))))
   ;; Else first paragraph, safely exported and cleaned
   (let ((p (org-element-map tree 'paragraph 'identity nil 'first-match)))
     (when p
       (let* ((raw (org-astro--safe-export (org-element-contents p) info))
              (clean (replace-regexp-in-string "[*_/]" "" raw))
              (one   (replace-regexp-in-string "\n" " " clean)))
         ;; take first sentence up to ~300 chars, else truncate with ellipsis
         (if (string-match "\\`\\(.\\{1,300\\}?[.?!]\\)" one)
             (org-trim (match-string 1 one))
           (truncate-string-to-width (org-trim one) 300 nil nil "…"))))))
  ;; If all else fails:
  "")
```

---

### (Optional) Use this tags parser wherever you build front matter

```elisp
(defun org-astro--parse-tags (info)
  "Return a list of tags from INFO, splitting on commas/whitespace/newlines."
  (let* ((tags-raw (or (plist-get info :astro-tags)
                       (plist-get info :tags)))
         (tags (when (and tags-raw (stringp tags-raw))
                 (org-split-string tags-raw "[, \t\n]+"))))
    (delq nil (mapcar #'string-trim tags))))
```

---

### (Optional) Wrap your preflight so it never aborts export

```elisp
(save-excursion
  (condition-case err
      (progn
        (let* ((tree (plist-get info :parse-tree))
               (title   (org-astro--get-title tree info))
               (excerpt (org-astro--get-excerpt tree info)))
          (when (and title (not (string-empty-p (string-trim title))))
            (org-astro--insert-keyword-at-end-of-block "TITLE" title))
          (when (and excerpt (not (string-empty-p (string-trim excerpt))))
            (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt))))
    (error (message "[ox-astro] Preflight skipped: %S" err))))
```
