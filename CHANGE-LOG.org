#+TITLE: ox-astro Change Log
#+AUTHOR: Jay Dixit & Claude
#+DATE: 2025-08-25

* Fix Emacs 27.1+ Deprecation Warnings (2025-09-28)

** Summary
Fixed deprecation warnings for Emacs 27.1+ compatibility without changing functionality.

** Changes
- **ox-astro-helpers.el**: Fixed unescaped character literal warning
  - Line 460: Changed ~?"~ to ~?\"~ (properly escaped double-quote character)
- **ox-astro-image-handlers.el**: Fixed obsolete function warning
  - Line 132: Changed ~return~ to ~cl-return~ (modern Common Lisp macro)

** Impact
- No functional changes - code behavior remains identical
- Eliminates deprecation warnings in Emacs 27.1 and newer
- Maintains backward compatibility

** Testing
- All existing functionality preserved
- Image export and gallery blocks continue to work as before

* Debug System Enhancement: Comprehensive Logging and Clipboard Integration (2025-08-30)

** Summary
- Enhanced debug system with comprehensive logging to `ox-astro-debug.log` in the ox-astro directory
- Added automatic file path copying to clipboard during export (source, output, debug paths)
- Improved debug logging throughout the export pipeline with detailed image processing information
- Gallery blocks now working correctly with both raw paths and org-mode links

** New Features
- **Debug logging**: When `org-astro-debug-images` is enabled, detailed logs are written to `ox-astro-debug.log`
- **Clipboard integration**: File paths automatically copied to clipboard on export completion
- **Header information**: Debug log includes export session header with timestamp and file paths
- **Gallery debugging**: Detailed logging of gallery image matching and processing

** Implementation Details
- Added `org-astro--debug-log-direct` for immediate file writing
- Enhanced `org-astro--dbg-log` with automatic header generation and clipboard copying
- Added `org-astro--dbg-update-output-file` to update debug info with actual output paths
- Integrated debug logging throughout prepare-images-filter and gallery handlers
- Added `ox-astro-debug.log` to `.gitignore`

** Debug Log Format
```
========================================
OX-ASTRO DEBUG LOG - 2025-08-30 21:32:41
========================================
Source: /path/to/source.org
Output: /path/to/output.mdx
========================================

[21:32:41] === Starting prepare-images-filter ===
[21:32:41] Processing 20 images in posts folder: /path/to/posts
[21:32:41] GALLERY: image-imports contains 20 items
[21:32:41] GALLERY generating component with 5 images
```

** Files Changed
- ox-astro-helpers.el: Added debug logging functions and enhanced existing debug calls
- ox-astro-handlers.el: Added debug logging to prepare-images-filter
- ox-astro.el: Added debug logging to export function and clipboard integration
- .gitignore: Added ox-astro-debug.log

* Automatic Source File Cleanup: Update org files after image copying (2025-08-28)

** Summary
- After copying images to assets folders, the original org file is automatically updated to reference the new absolute paths.
- This prevents accumulation of images in Downloads folder and keeps source files clean.
- Original references like `/Users/jay/Downloads/image.png` are replaced with absolute paths to copied files.

** New Behavior
- **Automatic path updating**: After successful image copy, org file is updated in-place
- **Multiple formats supported**: Both raw image paths and `[[file:path]]` org links are updated
- **Auto-save**: Buffer is automatically saved after path updates
- **Source cleanup**: No more orphaned files in Downloads folder

** Implementation
- Added `org-astro--update-image-path-in-buffer` function to replace image paths in current buffer
- Modified `org-astro--process-image-path` to accept optional `update-buffer` parameter
- Updated both body image and cover image processing to enable buffer updating
- Integrated auto-save functionality after image path updates

** Files Changed
- ox-astro-helpers.el: Added buffer updating function and modified image processing to update source files
- ox-astro-handlers.el: Enabled buffer updating for body images and added auto-save

* Post-Specific Image Folders: Organize assets by slug (2025-08-28)

** Summary
- Images are now organized into post-specific subfolders using the blog post's slug.
- Each post's images are stored in `src/assets/images/posts/{slug}/` instead of the generic `src/assets/images/posts/`.
- This prevents filename collisions between posts and provides better asset organization.

** New Behavior
- **Explicit slug**: `#+SLUG: my-awesome-post` → images go to `src/assets/images/posts/my-awesome-post/`
- **Auto-generated slug**: Title "My Awesome Post" → slug "my-awesome-post" → same folder structure  
- **Fallback**: If no slug can be determined, falls back to `src/assets/images/posts/` (preserving existing behavior)

** Implementation
- Modified `org-astro-prepare-images-filter` in `ox-astro-handlers.el` to generate slug from title/SLUG keyword and use it as sub-directory path.
- Updated cover image processing in `org-astro-helpers.el` to use the same post-specific slug folder structure.
- Maintained backward compatibility while providing better organization for posts with images.

** Files Changed
- ox-astro-handlers.el: Added slug generation logic and modified sub-directory path to use `posts/{slug}/`
- ox-astro-helpers.el: Updated cover image processing to use post-specific slug folder
- design-approach.org: Updated documentation to reflect new post-specific folder structure

* Visibility System Update: switch to `visibility` string (2025-08-26)

** Summary
- Replaced prior boolean-based visibility flags with a single string field `visibility` in front matter.
- Removed all support and references for `HIDE_FROM_MAIN` and `hideFromMain`.
- Continued support for `STATUS: draft` → `draft: true` (unchanged).

** New Behavior
- `#+VISIBILITY: blog` → `visibility: blog` (default channel; if omitted, key is not emitted and behavior should be equivalent to blog).
- `#+VISIBILITY: hidden` → `visibility: hidden` (exclude everywhere).
- `#+VISIBILITY: example` → `visibility: example` (exclude from main feed; visible on tags/categories if site is configured that way).
- Any other value is allowed: `#+VISIBILITY: <custom>` → `visibility: <custom>`.

** Implementation
- Front matter assembly now includes `(visibility . <string>)` when provided.
- Removed generation of legacy booleans `hidden` and `hideFromMain`.
- Removed legacy `:hide-from-main` option from the exporter’s `:options-alist`.

** Files Changed
- ox-astro-helpers.el: Front matter builder now reads `:visibility` only and emits `visibility` string; removed `hidden`/`hideFromMain` logic.
- ox-astro.el: Removed `(:hide-from-main "HIDE_FROM_MAIN" ...)` from `:options-alist`.
- README.org: Updated docs to describe `visibility` channels (blog/hidden/example/custom). Removed `HIDE_FROM_MAIN` examples and language.
- CLAUDE.md: Updated mapping to `visibility`.
- example-post.org: Updated examples to use `#+VISIBILITY: blog` and `#+VISIBILITY: example`.
- debug/*.org: Updated expectations to refer to `visibility: hidden` instead of `hidden: true`.

** Migration Notes
- Replace `#+HIDE_FROM_MAIN: true` with `#+VISIBILITY: example` (or another channel you prefer).
- Replace any logic in your Astro site that referenced `hidden`/`hideFromMain` with the new `visibility` string.
  - Example: treat `visibility !== 'blog'` as excluded from the main feed; treat `visibility === 'hidden'` as excluded everywhere.

** Validation Checklist
- Exporting a file with `#+VISIBILITY: hidden` yields front matter containing `visibility: hidden` and no `hidden` key.
- Exporting without `#+VISIBILITY` yields no `visibility` key in front matter.
- Exporting with `#+STATUS: draft` still yields `draft: true`.

* Excerpt Image Tag Removal Fix

** Problem Statement

Auto-generated excerpts were including image tags, causing unwanted image references in the excerpt text. For example:

#+begin_example
excerpt: The thing about Cascais is that the town is beautiful and the weather is exceptionally clement.  ![img](UsersjayDownloadsQR10941.jpg)
#+end_example

This created messy excerpts and potential broken image references in blog post previews.

** Solution

Enhanced the excerpt generation logic in two places:

1. **ox-astro-helpers.el** - Updated `org-astro--get-excerpt` function to remove both Markdown image tags (`![img](path)`) and HTML image tags (`<img...>`) from generated excerpts
2. **ox-astro.el** - Simplified duplicate excerpt logic in `org-astro-export-to-mdx` to use the centralized excerpt generation function

** Implementation Details

The fix uses regex patterns to strip image tags:
- `!\\[.*?\\]([^)]*)` - removes Markdown image syntax
- `<img[^>]*>` - removes HTML image tags

This ensures clean, text-only excerpts in both the .org source file and .mdx export.

** Files Changed

- =ox-astro-helpers.el:234-235= - Added image tag removal to excerpt processing
- =ox-astro.el:100-103= - Refactored to use centralized excerpt generation

* Raw Image Path Processing Feature

** Problem Statement

The original ox-astro exporter had limited image handling capabilities. It could handle cover images and linked images (=[file:path]=) but could not process raw image paths that appear directly in the text, such as:

#+begin_example
*** ✅ Volume Goals
foo

/Users/jay/Downloads/Volume.png
#+end_example

When users included raw absolute image paths in their Org documents, they would either be ignored or exported as plain text, missing the opportunity for proper Astro optimization.

** Requirements

We needed to implement a feature that would:

1. **Detect** raw image paths anywhere in the document (not just in paragraphs)
2. **Copy** images to the Astro assets folder (=src/assets/images/posts/=)  
3. **Generate** proper ES6 import statements
4. **Convert** raw paths to Astro =<Image>= components for optimization
5. **Auto-save** selected posts folder to Org file for future exports

** Technical Challenges Encountered

*** Challenge 1: Data Persistence Across Export Phases

*Problem:* Org's export system has multiple phases (parse-tree filter → transcoding → body filter → final filter). Data stored in the =info= plist during the parse-tree phase was not persisting to later phases.

*Symptoms:*
- Debug showed: "Storing 1 image imports" during parse-tree phase
- But later phases showed: "image-imports: nil"

*Root Cause:*
The =info= plist may be copied or reset between export phases, losing custom data.

*Solution:* Implemented a dual-storage approach:
#+begin_src emacs-lisp
;; Global variable to persist data across export phases
(defvar org-astro--current-body-images-imports nil)

;; Store in both places
(setq org-astro--current-body-images-imports final-data)
(plist-put info :astro-body-images-imports final-data)

;; Retrieve with fallback
(or (plist-get info :astro-body-images-imports)
    org-astro--current-body-images-imports)
#+end_src

*Lesson:* When working with Org export filters, always plan for data persistence issues. Global variables can serve as reliable fallbacks.

*** Challenge 2: Markdown Pre-processing Interference

*Problem:* Raw image paths were being converted to markdown image syntax (=![img](/path/to/image.png)=) by the underlying markdown backend before our custom transcoders could process them.

*Detection Method:* Added debug messages to trace the export pipeline:
#+begin_src emacs-lisp
(message "DEBUG: Found raw image path: %s" text)
(message "DEBUG: Processing markdown image: %s" match)
#+end_src

*Solution:* Implemented processing at multiple levels:
1. **Parse-tree filter**: Collect raw image paths from plain-text elements
2. **Plain-text transcoder**: Handle raw paths that weren't pre-processed  
3. **Final output filter**: Convert any remaining markdown image syntax

*Lesson:* In derived export backends, expect interference from parent backends. Plan for multiple intervention points in the export pipeline.

*** Challenge 3: Regex Pattern Precision

*Problem:* Initial regex patterns were too broad, matching unintended text or failing to match absolute paths.

*Evolution:*
- Started with: =\.\(png\|jpe\?g\)$= (matched any path ending in extensions)
- Refined to: =^/.*\.\(png\|jpe?g\)$= (only absolute paths)

*Lesson:* Start with specific regex patterns for well-defined use cases. Absolute paths are more predictable than relative ones.

** Implementation Architecture

*** 1. Image Collection (Parse-Tree Filter)

#+begin_src emacs-lisp
(defun org-astro-prepare-images-filter (tree _backend info)
  ;; Map over all plain-text elements to find raw image paths
  (org-element-map tree 'plain-text
    (lambda (text-element)
      ;; Process each line in the text element
      (dolist (line (split-string raw-text "\n"))
        (when (and (string-match-p "^/.*\.\(png\|jpe?g\)$" text)
                   (file-exists-p text))
          ;; Copy image and store import data
          ))))
#+end_src

*** 2. Import Generation (Body Filter)

#+begin_src emacs-lisp
(defun org-astro-body-filter (body _backend info)
  ;; Generate three types of imports:
  ;; 1. Astro Image component: import { Image } from 'astro:assets';
  ;; 2. Cover image: import hero from '~/assets/images/posts/cover.png';  
  ;; 3. Body images: import volume from '~/assets/images/posts/Volume.png';
  )
#+end_src

*** 3. Content Conversion (Final Output Filter)

#+begin_src emacs-lisp
(defun org-astro-final-output-filter (output _backend info)
  ;; Convert: ![img](/Users/jay/Downloads/Volume.png)
  ;; To: <Image src={volume} alt="img" />
  )
#+end_src

** Key Design Decisions

*** File Naming Strategy
- **Input**: =/Users/jay/Downloads/Volume.png=
- **Variable**: =Volume= (camelCase, no extension)
- **Destination**: =src/assets/images/posts/Volume.png=
- **Import path**: =~/assets/images/posts/Volume.png= (Astro alias)

*** Component Choice
- **Decision**: Use =<Image>= component instead of =<img>= tags
- **Rationale**: Astro's =<Image>= provides automatic optimization, lazy loading, and responsive images
- **Requirement**: Auto-import =import { Image } from 'astro:assets';=

*** Storage Location Strategy
- **Posts**: =src/assets/images/posts/=
- **Authors**: =src/assets/images/authors/=
- **Rationale**: Organize by content type for better asset management

** User Experience Improvements

*** Auto-Save Posts Folder
#+begin_src emacs-lisp
;; When user selects a posts folder, automatically save it to the Org file
(insert (format "#+DESTINATION_FOLDER: %s" selection))
(save-buffer)
#+end_src

*** Duplicate Front Matter Prevention
#+begin_src emacs-lisp
;; Track seen keys to prevent duplicate YAML entries
(let ((seen-keys '()))
  (when (not (memq key seen-keys))
    (push key seen-keys)
    ;; Add to YAML
    ))
#+end_src

** Testing & Debugging Strategy

*** Debug Message Pattern
#+begin_src emacs-lisp
;; Parse-tree phase
(message "DEBUG: Found raw image path: %s" text)
(message "DEBUG: Storing %d image imports: %s" (length data) data)

;; Body filter phase  
(message "DEBUG: Generating imports for: %s" body-images-imports)

;; Final filter phase
(message "DEBUG: Final filter - image-imports: %s" image-imports)
(message "DEBUG: Processing markdown image: %s" match)
#+end_src

*** Systematic Testing Approach
1. **Unit level**: Test individual functions with known inputs
2. **Integration level**: Test data flow between export phases
3. **End-to-end**: Test complete export workflow
4. **Edge cases**: Test with missing files, invalid paths, etc.

** File System Operations

*** Safety Measures
#+begin_src emacs-lisp
;; Always check file existence before processing
(when (file-exists-p text)
  ;; Create destination directory if needed
  (make-directory assets-folder t)
  ;; Avoid overwriting existing files
  (unless (file-exists-p dest-path)
    (copy-file expanded-path dest-path t)))
#+end_src

** Lessons Learned

*** 1. Org Export Architecture
- Export happens in distinct phases with potential data loss between phases
- Parse-tree filters run early and are good for data collection
- Final output filters are best for string-based transformations
- Global variables can bridge data persistence gaps

*** 2. Regex Development
- Start specific, then generalize if needed
- Test regex patterns with actual file paths from your use case
- Consider edge cases like paths with spaces or special characters

*** 3. Debugging Complex Systems
- Add debug messages at every phase boundary
- Use descriptive messages that show actual data values
- Remove debug messages once feature is stable

*** 4. User Experience Design
- Auto-save user selections to reduce friction
- Provide clear feedback about what files are being processed
- Handle missing dependencies gracefully

*** 5. Asset Management
- Use consistent naming conventions for imported variables
- Organize assets by content type (posts/, authors/, etc.)
- Leverage framework-specific optimizations (Astro's tilde alias)

** Future Enhancements

*** Potential Improvements
1. **Support for more image formats** (webp, avif, svg)
2. **Relative path handling** for more flexible workflows  
3. **Image optimization settings** (quality, formats, sizes)
4. **Batch processing** for multiple images in one line
5. **Smart alt text generation** from EXIF data or AI

*** Performance Considerations
- Consider lazy loading for documents with many images
- Implement caching for repeated exports of the same document
- Add progress indicators for large image processing operations

** Code Quality Improvements Made

*** Eliminated Duplicate Code
- Consolidated image processing logic into shared functions
- Unified import generation across different image sources

*** Error Handling
- Added file existence checks before processing
- Graceful fallbacks when image processing fails
- Clear error messages for debugging

*** Documentation
- Added comprehensive docstrings to all functions
- Included usage examples in comments
- Created this change log for future reference

** Summary

This feature successfully bridges the gap between Org mode's plain text nature and Astro's optimized image handling. The implementation demonstrates several important principles:

1. **Data persistence** across complex export pipelines
2. **Multi-phase processing** to handle various input formats
3. **User experience** optimization through automation
4. **Systematic debugging** for complex integrations

The solution transforms a simple raw image path into a fully optimized Astro image component with minimal user intervention, making the org-to-astro workflow significantly more powerful and user-friendly.

** Current state: still broken 
getting this error:
Debugger entered---Lisp error: (void-variable matched-path)
  (org-astro---filename-to-alt-text matched-path)
  (or (org-astro---filename-to-alt-text matched-path) "Image")
  (let ((var-name (plist-get matching-import :var-name)) (matched-path (plist-get matching-import :path)) (alt-text (or (org-astro---filename-to-alt-text matched-path) "Image"))) (format "<Image src={%s} alt=\"%s\" />" var-name alt-text))
  (if matching-import (let ((var-name (plist-get matching-import :var-name)) (matched-path (plist-get matching-import :path)) (alt-text (or (org-astro---filename-to-alt-text matched-path) "Image"))) (format "<Image src={%s} alt=\"%s\" />" var-name alt-text)) "")
  (let* ((image-imports (or (plist-get info :astro-body-images-imports) org-astro---current-body-images-imports)) (paragraph-context (org-element-interpret-data paragraph)) (matching-import nil)) (if image-imports (progn (let ((tail image-imports)) (while tail (let ((import ...)) (let* (... ...) (if ... ...)) (setq tail (cdr tail))))))) (if matching-import (let ((var-name (plist-get matching-import :var-name)) (matched-path (plist-get matching-import :path)) (alt-text (or (org-astro---filename-to-alt-text matched-path) "Image"))) (format "<Image src={%s} alt=\"%s\" />" var-name alt-text)) ""))
  org-astro---handle-broken-image-paragraph((paragraph (:standard-properties [254 254 254 347 348 1 nil nil nil nil nil nil nil nil #<buffer 2025-08-20.org<2>> nil nil (section (:standard-properties ...) (keyword ...) (keyword ...) #1 (keyword ...) (keyword ...) (keyword ...) (src-block ...) (paragraph ... ... ... ...))]) #("/Users/jay/Downloads/20231005" 0 29 (:parent #1)) (subscript (:standard-properties [283 nil 284 289 289 0 nil nil nil nil nil nil nil nil #<buffer 2025-08-20.org<2>> nil nil #1] :use-brackets-p nil) #("BOGGI" 0 5 (:parent #5))) #("-SS24" 0 5 (:parent #1)) (subscript (:standard-properties [294 nil 295 302 302 0 nil nil nil nil nil nil nil nil #<buffer 2025-08-20.org<2>> nil nil #1] :use-brackets-p nil) #("MICHELE" 0 7 (:parent #7))) #("-DI-DIO" 0 7 


* Refactor: Simplified and Corrected Link Handling

** Problem Statement

The logic for handling links, especially raw URLs, was fragmented and incorrect.
- `org-astro-link` would pass raw URLs to the default markdown backend, which incorrectly rendered them as `<url>` instead of using the desired `<LinkPeek>` component.
- `org-astro-plain-text` was intended to handle these URLs, but Org mode's parser correctly identifies them as `link` elements, so the `plain-text` transcoder was never called for them.
- `org-astro-final-output-filter` and `org-astro-body-filter` contained brittle, redundant regex-based workarounds to fix this, making the codebase hard to maintain.

** Solution Implementation

The link handling logic was consolidated and corrected by making `org-astro-link` the single source of truth for all link elements.

1.  **`org-astro-link` Corrected**: The function was modified to properly detect raw URLs (i.e., link elements with no description). It now directly transcodes them into the correct `<LinkPeek>` component syntax.
2.  **`plist-put` for Imports**: It now correctly sets the `:astro-uses-linkpeek` property in the `info` plist, ensuring the `LinkPeek` component is imported when needed.
3.  **Redundant Logic Removed**: The previous, incorrect refactoring was reverted, and the brittle regex workarounds in `org-astro-final-output-filter` and `org-astro-body-filter` were removed in a prior step.
4.  **`org-astro-plain-text` Role**: The logic in `org-astro-plain-text` is preserved to handle cases where a URL is not automatically recognized as a link by Org mode but exists on its own line.

** Files Modified

- `ox-astro-helpers.el`

** User Impact

- Raw URLs are now consistently and correctly converted to `<LinkPeek>` components as intended.
  - The code is now cleaner, more robust, and easier to maintain.

* Feature: Preserve Markdown Links Unchanged

** Summary

Some Org source files contain links already written in Markdown format (e.g.,
`[Tripadvisor][1]` or `[Label](https://example.com)`). These should be exported
unchanged.

** Implementation

- Added `org-astro--contains-markdown-link-p` to conservatively detect Markdown
  link syntax in plain text.
- Updated `org-astro-plain-text` to pass through any line containing Markdown
  link syntax without further processing (e.g., no LinkPeek or image handling
  on those lines).
- Updated `org-astro-link` to return the description unchanged if it is already
  a Markdown link string.

** Impact

- Inline and reference-style Markdown links written directly in the Org source
  are preserved exactly in the exported MDX.

* Arbitrary Posts Folder Path Support

** Problem Statement

The ox-astro exporter only supported posts folder selection through predefined nicknames in =org-astro-known-posts-folders=. Users could not specify arbitrary absolute paths directly in the =#+DESTINATION_FOLDER= keyword.

For example, this would not work:
#+begin_example
#+DESTINATION_FOLDER: /Users/jay/Library/CloudStorage/Dropbox/github/astro-monorepo/apps/jaydocs/src/content/consequential-pages/
#+end_example

The exporter would fail to resolve the path since it wasn't in the known folders alist, forcing users to either:
1. Add every possible path to their configuration
2. Use the interactive folder selection every time

** Solution Implementation

Modified the posts folder resolution logic in =ox-astro-export-to-mdx= (lines 123-152) to support three resolution modes:

1. **Nickname Resolution**: Check if the value matches a key in =org-astro-known-posts-folders=
2. **Absolute Path Resolution**: If the value is an absolute path and the directory exists, use it directly
3. **Interactive Fallback**: Prompt user to select from known folders if neither works

** Technical Changes

*** ox-astro.el:123-152
Replaced simple =or= logic with a =cond= statement that:
- Uses =file-name-absolute-p= to detect absolute paths
- Uses =file-directory-p= to validate directory existence
- Preserves existing behavior for known folder nicknames
- Maintains interactive selection as fallback

*** Key Functions Used
- =file-name-absolute-p=: Detects if path starts with / (Unix) or drive letter (Windows)
- =file-directory-p=: Validates that the directory actually exists
- =expand-file-name=: Resolves any relative components in the path

** User Impact

Users can now specify any valid absolute directory path in =#+DESTINATION_FOLDER= without needing to pre-configure it in their Emacs settings. This enables:
- Temporary exports to different locations
- Project-specific folder structures
- Dynamic folder paths without configuration changes

* Bug Fixes: Hash Table and YAML Escaping Errors

** Problem Statement

Export failed for documents with complex content (like embedded JSON data) due to two critical errors:

1. **Hash Table Error**: =gethash= called with =nil= instead of hash table
2. **YAML Escaping Error**: Invalid backslash use in regex replacement for quote escaping

** Root Cause Analysis

*** Hash Table Error
*Location*: =ox-astro-helpers.el:258= and =ox-astro-helpers.el:287=
*Cause*: =cl-find= function called with =nil= when =:astro-body-images-imports= was empty
*Symptom*: =(wrong-type-argument hash-table-p nil)=

The =cl-find= function internally uses hash table operations when passed =nil=, expecting a list.

*** YAML Escaping Error  
*Location*: =ox-astro-helpers.el:74=
*Cause*: Incorrect backslash escaping in =replace-regexp-in-string=
*Pattern*: ="\\"= should be ="\\\\"= for literal backslash in replacement text

** Solution Implementation

*** Hash Table Fix
Added defensive nil checks before =cl-find= calls:

#+begin_src emacs-lisp
;; Before (problematic)
(cl-find path image-imports
         :key (lambda (item) (plist-get item :path))
         :test #'string-equal)

;; After (safe)
(when image-imports
  (cl-find path image-imports
           :key (lambda (item) (plist-get item :path))
           :test #'string-equal))
#+end_src

*** YAML Escaping Fix
Corrected backslash escaping for quote replacement:

#+begin_src emacs-lisp
;; Before (invalid)
(replace-regexp-in-string "\"" "\\\"" val)

;; After (correct)  
(replace-regexp-in-string "\"" "\\\\\\\"" val)
#+end_src

** Files Modified

- =ox-astro-helpers.el:258= - Added nil check in =org-astro-paragraph=
- =ox-astro-helpers.el:287= - Added nil check in =org-astro-plain-text=  
- =ox-astro-helpers.el:74= - Fixed backslash escaping in =org-astro--gen-yaml-front-matter=

** Testing

Verified fix with problematic file =20250731235900-fringe_global_south.org= that contains:
- Complex embedded JSON data with quotes
- Long paragraphs with analysis text
- No image imports (causing nil image-imports list)

Export now succeeds and generates valid MDX output.

** Architecture Improvements

*** Defensive Programming Pattern
Adopted consistent pattern for custom logic:
- Always validate data structures before processing
- Use =when= guards for optional data
- Provide fallback behavior for missing data

*** Error Prevention Strategy
- Check for nil before using =cl-find= and similar functions
- Validate regex patterns and escape sequences
- Test with complex real-world content, not just simple cases

** Lessons Learned

*** Custom Logic Requires Defensive Programming
While ox-astro leverages the proven ox-md backend, our custom Astro-specific features need careful null checking and validation.

*** Complex Content Reveals Edge Cases
Simple test files don't expose these issues. Complex documents with embedded data, special characters, and edge cases are essential for thorough testing.

*** Emacs Lisp String Escaping Subtleties
Backslash escaping in =replace-regexp-in-string= requires careful attention to literal vs. interpreted backslashes.

** Quality Assurance

Added the problematic file =20250731235900-fringe_global_south.org= as a regression test case for future development. This file effectively tests:
- Nil data structure handling
- Complex string content processing  
- YAML front matter generation with special characters
- Export pipeline robustness
