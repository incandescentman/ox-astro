#+TITLE: ox-astro Design Approach and Architecture Decisions
#+DATE: 2025-08-24

* Architecture Overview

** Core Philosophy: Extend, Don't Replace
ox-astro is built as a *derived backend* from ox-md.el, following Org's extensible export architecture. This means we inherit all standard markdown functionality and only override specific elements that need Astro-specific behavior.

#+BEGIN_SRC elisp
(org-export-define-derived-backend 'astro 'md
  :translate-alist
  '((src-block . org-astro-src-block)
    (link . org-astro-link)
    (headline . org-astro-heading)
    (paragraph . org-astro-paragraph)
    (plain-text . org-astro-plain-text)
    (table . org-astro-table)
    (table-row . org-astro-table-row)
    (table-cell . org-astro-table-cell)))
#+END_SRC

** What We Inherit vs. What We Override

*** Inherited from ox-md.el (Standard Markdown):
- Basic text formatting (bold, italic, code)
- Lists (except TODO items)
- Quotes
- Most link types
- Basic paragraph handling

*** Custom Astro-Specific Overrides:
- =src-block=: Handle special code block types (user/prompt/quote)
- =link=: Raw URL formatting for LinkPeek components; preserve Markdown links; handle reference definitions
- =headline=: TODO items → GitHub-style task lists (ox-md only adds TODO prefix to headlines)
- =paragraph=: Raw image path detection → Astro Image components
- =plain-text=: Image and URL processing within text
- =table=, =table-row=, =table-cell=: Convert tables to Markdown format instead of HTML

* Image Handling Strategy

The image handling pipeline is a critical feature of ox-astro, designed to bridge the gap between local file paths in Org mode and optimized web assets in an Astro project.

** Goals
1.  **Detect** image paths from multiple sources (Org links, raw text).
2.  **Copy** images from anywhere on the user's filesystem to the correct Astro assets directory.
3.  **Sanitize** filenames to be web- and build-tool-friendly.
4.  **Generate** valid, aliased ES6 import statements for MDX.
5.  **Transform** the original path into a JSX-like =<Image>= component using the imported variable.

** Implementation Details

*** 1. Path Detection (Multi-Source)
Image paths are collected from the Org buffer in a pre-processing step (=org-astro-prepare-images-filter=) using these methods:
-  *Org Links*: Standard =[[file:/path/to/image.png]]= links are parsed.
-  *Raw Text Paths*: Absolute paths like =/Users/jay/Downloads/image.png= appearing on their own line are detected.
-  *Fragmented Paths*: Paths broken by Org's subscript parser (e.g., containing underscores) are reconstructed and detected.

*** 2. Asset Folder Resolution
The destination for copied images is determined dynamically with post-specific organization.
-  **Function**: =org-astro--get-assets-folder=
-  **Logic**: It takes the post's destination folder (e.g., =.../src/content/blog/=) and navigates up the directory tree to find the project's =src/= directory. From there, it constructs the absolute path to =src/assets/images/posts/{slug}/= where =slug= is the post's unique identifier.
-  **Post-Specific Folders**: Each blog post gets its own image subfolder using the exact slug that matches the post's URL structure. For example, a post with slug "my-awesome-post" will have images stored in =src/assets/images/posts/my-awesome-post/=.
-  **Result**: This makes the logic resilient to different project structures while providing better organization and preventing filename collisions between posts.

*** 3. File Copying and Sanitization
-  **Function**: =org-astro--process-image-path=
-  **Copying**: Once the source path and destination directory are known, =copy-file= is used to move the asset into the Astro project. The destination directory is created if it doesn't exist.
-  **Sanitization**: Before copying, filenames are sanitized by =org-astro--sanitize-filename= to:
    - Replace underscores with hyphens (to prevent Org subscript parsing issues).
    - Remove characters unsafe for URLs or variable names.
    - Coalesce multiple hyphens.

*** 4. Import Path Generation
-  **Function**: =org-astro--process-image-path=
-  **Format**: The function returns an Astro-friendly aliased path.
-  **Example**: A file copied to =/path/to/src/assets/images/posts/my-awesome-post/My-Image.png= will have its import path generated as =~/assets/images/posts/my-awesome-post/My-Image.png=.
-  **Rationale**: Using the =~/= alias (which points to =/src/=) makes the imports robust and independent of the file's location within the =content/= directory.

*** 5. JS Variable Name Generation
-  **Function**: =org-astro--path-to-var-name=
-  **Logic**: It converts the sanitized filename into a valid JavaScript camelCase variable name.
-  **Edge Case**: It explicitly checks if the sanitized name starts with a number. If it does, it prepends the prefix "img" to ensure the variable name is valid.
    -  =2025-image.png= → =img2025Image=

*** 6. Data Persistence Across Export Phases
-  **Problem**: Image data collected in the initial filter phase was being lost before the final transcoding phase.
-  **Solution**: A dual-storage pattern is used. A global variable (=org-astro--current-body-images-imports=) acts as a reliable fallback if the image data is purged from the exporter's internal =info= plist between phases. This is critical for the feature's stability.

*** 7. Source File Cleanup
After successfully copying images, the original org file is automatically updated to prevent Downloads folder accumulation:
-  **Path Replacement**: Raw image paths and org links are updated to point to the copied files' absolute paths
-  **Auto-save**: The buffer is automatically saved after updates
-  **Scope**: Updates paths that were present during the export process

*** 8. Final MDX Output
The collected data is used to assemble the final MDX output:
1.  **Import Injection**: The generated import statement is added at the top of the file.
    #+BEGIN_SRC mdx
    import { Image } from 'astro:assets';
    import img2025Image from '~/assets/images/posts/my-awesome-post/2025-image.png';
    #+END_SRC
2.  **Component Transformation**: The original raw image path in the document body is replaced with an Astro =<Image>= component.
    #+BEGIN_SRC mdx
    <Image src={img2025Image} alt="2025 image" />
    #+END_SRC

* Key Design Decisions

** Decision 1: Derived Backend vs. Standalone
*Rationale*: Instead of building from scratch, derive from ox-md to get proven markdown export for free.
*Benefits*: 
- Reduces code complexity
- Inherits bug fixes from ox-md
- Standard markdown elements "just work"
- Focus development on Astro-specific features

*Trade-offs*: 
- Tied to ox-md's behavior and limitations
- Need to understand Org export internals

** Decision 2: Three-Phase Processing Pipeline
1. *Parse-tree filter*: Collect and process images before transcoding
2. *Element transcoding*: Convert individual elements to markdown/MDX
3. *Final output filter*: Post-process entire document

*Rationale*: Separates concerns and allows for complex asset management while keeping transcoding functions focused.

** Decision 3: Custom TODO → Task List Conversion
*Problem*: ox-md handles TODO items by prepending the keyword to headlines.
*Our Approach*: Convert TODO items to GitHub-style interactive task lists.
*Rationale*: Task lists are more interactive and semantically correct for web content than headlines with TODO prefixes.

** Decision 4: Defensive Programming for Custom Logic
After encountering bugs with nil hash tables and regex escaping, adopted pattern of:
- Always check for nil before using =cl-find=
- Validate data structures before processing
- Use proper escape sequences in regex replacements

** Decision 5: Graceful Handling of Missing Information
*Principle*: If there is missing information in the Org source file, ox-astro must either use sensible defaults (like the default author image) or prompt the user to supply the information (e.g., destination folder), rather than failing with an error.
*Rationale*: Provides a smoother user experience and prevents export failures for common omissions. It makes the exporter more robust and user-friendly.

** Decision 6: Comprehensive Link Handling
We standardize all link behavior within our transcoding functions to avoid post-hoc regex fixes. Bare URLs are converted to a custom =<LinkPeek>= component, and Markdown links are preserved.

** Decision 7: org-roam Integration and Keyword Placement
The keyword insertion logic is designed to respect =:PROPERTIES:= blocks created by org-roam, ensuring metadata is inserted in the correct location without disrupting the file structure.

** Decision 8: Narrowed Subtree Export Support
The exporter correctly handles inserting keywords and metadata when exporting a narrowed subtree, enabling workflows where multiple posts exist in a single Org file.

** Decision 9: Table Export to Markdown
Tables are transcoded to Markdown syntax (instead of the default HTML) for better compatibility with the MDX ecosystem.

** Decision 10: Filename Resolution Honors Subtree SLUG
*Problem*: Subtree exports (especially when triggered from a narrowed buffer) produced filenames derived from the parent file (e.g., date-based) rather than the subtree's slug.
*Approach*: Detect an actively narrowed buffer via =buffer-narrowed-p= and treat it equivalently to an explicit subtree export. When exporting, search for ~#+SLUG:~ in the narrowed region first; if not found, fall back to a full-buffer search.
*Result*: Subtree/narrowed exports now reliably produce ~slug.mdx~ using the subtree's own ~#+SLUG~. If missing, the preflight step derives ~#+TITLE~ from the subtree heading and inserts a slugified ~#+SLUG~ within the subtree before export.

* References

- [[file:../ox-astro.el][ox-astro.el]] - Main backend definition
- [[file:../ox-astro-helpers.el][ox-astro-helpers.el]] - Transcoding functions and utilities  
- [[file:../ox-astro-handlers.el][ox-astro-handlers.el]] - Filter functions and processing pipeline
- [[file:../org-reference-backends/ox-md.el][ox-md.el]] - Reference implementation for markdown export
- [[https://orgmode.org/worg/dev/org-export-reference.html][Org Export Reference]] - Official documentation
