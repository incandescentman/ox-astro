Debugger entered--Lisp error: (wrong-type-argument hash-table-p nil)
gethash(((link (:standard-properties [162 nil 419 429 431 0 nil nil nil nil nil nil nil nil #<buffer 2025-08-09.org> nil nil (paragraph (:standard-properties [162 162 162 458 459 1 nil planning nil nil nil nil nil nil #<buffer 2025-08-09.org> nil nil ...]) . #1)] :type "https" :type-explicit-p t :path "//www.google.com/maps/place/Bar+Prince/@55.9528595..." :format bracket :raw-link "https://www.google.com/maps/place/Bar+Prince/@55.9..." :application nil :search-option nil) #("Bar Prince" 0 10 (:parent #2))) #("\n(in the hotel we were at)\n" 0 27 (:parent (paragraph (:standard-properties [162 162 162 458 459 1 nil planning nil nil nil nil nil nil #<buffer 2025-08-09.org> nil nil (section ... #6 ... ... ... ... ... ... ... ... ...)]) . #1)))) nil)
org-export-data(((link (:standard-properties [162 nil 419 429 431 0 nil nil nil nil nil nil nil nil #<buffer 2025-08-09.org> nil nil (paragraph (:standard-properties [162 162 162 458 459 1 nil planning nil nil nil nil nil nil #<buffer 2025-08-09.org> nil nil ...]) . #1)] :type "https" :type-explicit-p t :path "//www.google.com/maps/place/Bar+Prince/@55.9528595..." :format bracket :raw-link "https://www.google.com/maps/place/Bar+Prince/@55.9..." :application nil :search-option nil) #("Bar Prince" 0 10 (:parent #2))) #("\n(in the hotel we were at)\n" 0 27 (:parent (paragraph (:standard-properties [162 162 162 458 459 1 nil planning nil nil nil nil nil nil #<buffer 2025-08-09.org> nil nil (section ... #6 ... ... ... ... ... ... ... ... ...)]) . #1)))) (:smart-quotes nil :title "2025-08-09" :author nil :author-image nil :date nil :publish-date nil :excerpt nil :tags nil :cover-image nil :cover-image-alt nil :visibility nil :status nil :destination-folder nil :astro-publish-date nil :astro-excerpt nil :astro-image nil :astro-image-alt nil :astro-author-image nil :astro-tags nil :astro-imports nil :astro-posts-folder nil :astro-date-format "%Y-%m-%dT%H:%M:%SZ" :md-footnote-format "<sup>%s</sup>" :md-footnotes-section "%s%s" :md-headline-style atx ...))
(let* ((raw-text (org-export-data (org-element-contents paragraph) info)) (clean-text (replace-regexp-in-string "[*_/]" "" raw-text)) (single-line-text (replace-regexp-in-string "\n" " " clean-text)) (first-sentence (if (string-match "\\(.+?[.?!]\\)" single-line-text) (match-string 1 single-line-text) single-line-text))) (org-trim first-sentence))
(progn (let* ((raw-text (org-export-data (org-element-contents paragraph) info)) (clean-text (replace-regexp-in-string "[*_/]" "" raw-text)) (single-line-text (replace-regexp-in-string "\n" " " clean-text)) (first-sentence (if (string-match "\\(.+?[.?!]\\)" single-line-text) (match-string 1 single-line-text) single-line-text))) (org-trim first-sentence)))
(if paragraph (progn (let* ((raw-text (org-export-data (org-element-contents paragraph) info)) (clean-text (replace-regexp-in-string "[*_/]" "" raw-text)) (single-line-text (replace-regexp-in-string "\n" " " clean-text)) (first-sentence (if (string-match "\\(.+?[.?!]\\)" single-line-text) (match-string 1 single-line-text) single-line-text))) (org-trim first-sentence))))
(let* ((paragraph (org-element-map tree 'paragraph 'identity nil 'first-match)) (excerpt-text (if paragraph (progn (let* ((raw-text ...) (clean-text ...) (single-line-text ...) (first-sentence ...)) (org-trim first-sentence)))))) (if (and excerpt-text (not (string-blank-p excerpt-text))) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t))))
(if excerpt-present nil (let* ((paragraph (org-element-map tree 'paragraph 'identity nil 'first-match)) (excerpt-text (if paragraph (progn (let* (... ... ... ...) (org-trim first-sentence)))))) (if (and excerpt-text (not (string-blank-p excerpt-text))) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t)))))
(let* ((tree (org-element-parse-buffer)) (title-present (plist-get info :title)) (excerpt-present (or (plist-get info :astro-excerpt) (plist-get info :excerpt))) (date-present (or (plist-get info :astro-publish-date) (plist-get info :publish-date) (plist-get info :date)))) (if title-present nil (let* ((headline (org-element-map tree 'headline 'identity nil 'first-match)) (title (if headline (progn (org-export-data ... info))))) (if (and title (not (string-blank-p title))) (progn (org-astro--insert-keyword-at-end-of-block "TITLE" title) (setq buffer-modified-p t))))) (if excerpt-present nil (let* ((paragraph (org-element-map tree 'paragraph 'identity nil 'first-match)) (excerpt-text (if paragraph (progn (let* ... ...))))) (if (and excerpt-text (not (string-blank-p excerpt-text))) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t))))) (if date-present nil (let ((date-str (format-time-string (org-time-stamp-format 'long 'inactive) (current-time)))) (org-astro--insert-keyword-at-end-of-block "PUBLISH_DATE" date-str) (setq buffer-modified-p t))))
(save-excursion (let* ((tree (org-element-parse-buffer)) (title-present (plist-get info :title)) (excerpt-present (or (plist-get info :astro-excerpt) (plist-get info :excerpt))) (date-present (or (plist-get info :astro-publish-date) (plist-get info :publish-date) (plist-get info :date)))) (if title-present nil (let* ((headline (org-element-map tree 'headline 'identity nil 'first-match)) (title (if headline (progn ...)))) (if (and title (not (string-blank-p title))) (progn (org-astro--insert-keyword-at-end-of-block "TITLE" title) (setq buffer-modified-p t))))) (if excerpt-present nil (let* ((paragraph (org-element-map tree 'paragraph 'identity nil 'first-match)) (excerpt-text (if paragraph (progn ...)))) (if (and excerpt-text (not (string-blank-p excerpt-text))) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t))))) (if date-present nil (let ((date-str (format-time-string (org-time-stamp-format ... ...) (current-time)))) (org-astro--insert-keyword-at-end-of-block "PUBLISH_DATE" date-str) (setq buffer-modified-p t)))))
(let ((info (org-export-get-environment 'astro)) (buffer-modified-p nil)) (save-excursion (let* ((tree (org-element-parse-buffer)) (title-present (plist-get info :title)) (excerpt-present (or (plist-get info :astro-excerpt) (plist-get info :excerpt))) (date-present (or (plist-get info :astro-publish-date) (plist-get info :publish-date) (plist-get info :date)))) (if title-present nil (let* ((headline (org-element-map tree ... ... nil ...)) (title (if headline ...))) (if (and title (not ...)) (progn (org-astro--insert-keyword-at-end-of-block "TITLE" title) (setq buffer-modified-p t))))) (if excerpt-present nil (let* ((paragraph (org-element-map tree ... ... nil ...)) (excerpt-text (if paragraph ...))) (if (and excerpt-text (not ...)) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t))))) (if date-present nil (let ((date-str (format-time-string ... ...))) (org-astro--insert-keyword-at-end-of-block "PUBLISH_DATE" date-str) (setq buffer-modified-p t))))) (if buffer-modified-p (progn (save-buffer) (setq info (org-export-get-environment 'astro)))) (let* ((posts-folder-from-file (or (plist-get info :astro-posts-folder) (plist-get info :destination-folder))) (resolved-posts-folder (and posts-folder-from-file (cdr (assoc posts-folder-from-file org-astro-known-posts-folders)))) (posts-folder (cond (resolved-posts-folder resolved-posts-folder) ((and posts-folder-from-file (file-name-absolute-p posts-folder-from-file) (file-directory-p ...)) posts-folder-from-file) (t (let* (... ...) (if selected-path ...) selected-path)))) (pub-dir (if posts-folder (progn (file-name-as-directory (expand-file-name ...))))) (default-outfile (org-export-output-file-name ".mdx" subtreep pub-dir)) (out-dir (file-name-directory default-outfile)) (out-filename (file-name-nondirectory default-outfile)) (final-filename (replace-regexp-in-string "_" "-" (replace-regexp-in-string "^[0-9]+-" "" out-filename))) (outfile (expand-file-name final-filename out-dir))) (if pub-dir (progn (make-directory pub-dir :parents) (org-export-to-file 'astro outfile async subtreep visible-only body-only) outfile) (progn (message "Astro export cancelled: No posts folder selected.") nil))))
(if (string-equal ".mdx" (file-name-extension (buffer-file-name))) (message "Cannot export from an .mdx file. Run this from the...") (let ((info (org-export-get-environment 'astro)) (buffer-modified-p nil)) (save-excursion (let* ((tree (org-element-parse-buffer)) (title-present (plist-get info :title)) (excerpt-present (or (plist-get info :astro-excerpt) (plist-get info :excerpt))) (date-present (or (plist-get info :astro-publish-date) (plist-get info :publish-date) (plist-get info :date)))) (if title-present nil (let* ((headline ...) (title ...)) (if (and title ...) (progn ... ...)))) (if excerpt-present nil (let* ((paragraph ...) (excerpt-text ...)) (if (and excerpt-text ...) (progn ... ...)))) (if date-present nil (let ((date-str ...)) (org-astro--insert-keyword-at-end-of-block "PUBLISH_DATE" date-str) (setq buffer-modified-p t))))) (if buffer-modified-p (progn (save-buffer) (setq info (org-export-get-environment 'astro)))) (let* ((posts-folder-from-file (or (plist-get info :astro-posts-folder) (plist-get info :destination-folder))) (resolved-posts-folder (and posts-folder-from-file (cdr (assoc posts-folder-from-file org-astro-known-posts-folders)))) (posts-folder (cond (resolved-posts-folder resolved-posts-folder) ((and posts-folder-from-file ... ...) posts-folder-from-file) (t (let* ... ... selected-path)))) (pub-dir (if posts-folder (progn (file-name-as-directory ...)))) (default-outfile (org-export-output-file-name ".mdx" subtreep pub-dir)) (out-dir (file-name-directory default-outfile)) (out-filename (file-name-nondirectory default-outfile)) (final-filename (replace-regexp-in-string "_" "-" (replace-regexp-in-string "^[0-9]+-" "" out-filename))) (outfile (expand-file-name final-filename out-dir))) (if pub-dir (progn (make-directory pub-dir :parents) (org-export-to-file 'astro outfile async subtreep visible-only body-only) outfile) (progn (message "Astro export cancelled: No posts folder selected.") nil)))))
org-astro-export-to-mdx()
(org-open-file (org-astro-export-to-mdx))
(lambda (_a _s _v _b) (org-open-file (org-astro-export-to-mdx)))(nil nil nil nil)
org-export-dispatch(nil)
funcall-interactively(org-export-dispatch nil)
command-execute(org-export-dispatch)
