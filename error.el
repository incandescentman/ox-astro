Debugger entered--Lisp error: (wrong-type-argument hash-table-p nil)
  gethash((#("Edinburgh late night" 0 20 (:parent (headline (:standard-properties [1 1 25 2825 2825 0 (:title) first-section nil nil nil 27 2823 2 #<buffer test.org> nil nil (org-data ... #5)] :pre-blank 0 :raw-value "Edinburgh late night" :title #1 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p nil :archivedp nil :commentedp nil) (section (:standard-properties [25 25 25 2825 2825 0 nil section nil nil nil 25 2825 nil #<buffer test.org> nil nil #5]) (paragraph (:standard-properties ...) (link ... ...) #("\n(in the hotel we were at)\n" 0 27 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...))))))) nil)
  org-export-data((#("Edinburgh late night" 0 20 (:parent (headline (:standard-properties [1 1 25 2825 2825 0 (:title) first-section nil nil nil 27 2823 2 #<buffer test.org> nil nil (org-data ... #5)] :pre-blank 0 :raw-value "Edinburgh late night" :title #1 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p nil :archivedp nil :commentedp nil) (section (:standard-properties [25 25 25 2825 2825 0 nil section nil nil nil 25 2825 nil #<buffer test.org> nil nil #5]) (paragraph (:standard-properties ...) (link ... ...) #("\n(in the hotel we were at)\n" 0 27 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...)) (paragraph (:standard-properties ...) (link ... ...) #("\n" 0 1 ...))))))) (:smart-quotes nil :title nil :author nil :author-image nil :date nil :publish-date nil :excerpt nil :tags nil :cover-image nil :cover-image-alt nil :visibility nil :status nil :destination-folder nil :astro-publish-date nil :astro-excerpt nil :astro-image nil :astro-image-alt nil :astro-author-image nil :astro-tags nil :astro-imports nil :astro-posts-folder nil :astro-date-format "%Y-%m-%dT%H:%M:%SZ" :md-footnote-format "<sup>%s</sup>" :md-footnotes-section "%s%s" :md-headline-style atx ...))
  (progn (org-export-data (org-element--property :title headline nil nil) info))
  (if headline (progn (org-export-data (org-element--property :title headline nil nil) info)))
  (let* ((headline (org-element-map tree 'headline 'identity nil 'first-match)) (title (if headline (progn (org-export-data (org-element--property :title headline nil nil) info))))) (if (and title (not (string-blank-p title))) (progn (org-astro--insert-keyword-at-end-of-block "TITLE" title) (setq buffer-modified-p t))))
  (if title-present nil (let* ((headline (org-element-map tree 'headline 'identity nil 'first-match)) (title (if headline (progn (org-export-data (org-element--property :title headline nil nil) info))))) (if (and title (not (string-blank-p title))) (progn (org-astro--insert-keyword-at-end-of-block "TITLE" title) (setq buffer-modified-p t)))))
  (let* ((tree (org-element-parse-buffer)) (title-present (plist-get info :title)) (excerpt-present (or (plist-get info :astro-excerpt) (plist-get info :excerpt))) (date-present (or (plist-get info :astro-publish-date) (plist-get info :publish-date) (plist-get info :date)))) (if title-present nil (let* ((headline (org-element-map tree 'headline 'identity nil 'first-match)) (title (if headline (progn (org-export-data ... info))))) (if (and title (not (string-blank-p title))) (progn (org-astro--insert-keyword-at-end-of-block "TITLE" title) (setq buffer-modified-p t))))) (if excerpt-present nil (let* ((paragraph (org-element-map tree 'paragraph 'identity nil 'first-match)) (excerpt-text (if paragraph (progn (let* ... nil) (org-trim first-sentence))))) nil) (if (and excerpt-text (not (string-blank-p excerpt-text))) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t)))))
  (save-excursion (let* ((tree (org-element-parse-buffer)) (title-present (plist-get info :title)) (excerpt-present (or (plist-get info :astro-excerpt) (plist-get info :excerpt))) (date-present (or (plist-get info :astro-publish-date) (plist-get info :publish-date) (plist-get info :date)))) (if title-present nil (let* ((headline (org-element-map tree 'headline 'identity nil 'first-match)) (title (if headline (progn ...)))) (if (and title (not (string-blank-p title))) (progn (org-astro--insert-keyword-at-end-of-block "TITLE" title) (setq buffer-modified-p t))))) (if excerpt-present nil (let* ((paragraph (org-element-map tree 'paragraph 'identity nil 'first-match)) (excerpt-text (if paragraph (progn ... ...)))) nil) (if (and excerpt-text (not (string-blank-p excerpt-text))) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t))))) (if date-present nil (let ((date-str (format-time-string (org-time-stamp-format 'long 'inactive) (current-time)))) (org-astro--insert-keyword-at-end-of-block "PUBLISH_DATE" date-str) (setq buffer-modified-p t))))
  (let ((info (org-export-get-environment 'astro)) (buffer-modified-p nil)) (save-excursion (let* ((tree (org-element-parse-buffer)) (title-present (plist-get info :title)) (excerpt-present (or (plist-get info :astro-excerpt) (plist-get info :excerpt))) (date-present (or (plist-get info :astro-publish-date) (plist-get info :publish-date) (plist-get info :date)))) (if title-present nil (let* ((headline (org-element-map tree ... ... nil ...)) (title (if headline ...))) (if (and title (not ...)) (progn (org-astro--insert-keyword-at-end-of-block "TITLE" title) (setq buffer-modified-p t))))) (if excerpt-present nil (let* ((paragraph (org-element-map tree ... ... nil ...)) (excerpt-text (if paragraph ...))) nil) (if (and excerpt-text (not (string-blank-p excerpt-text))) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t))))) (if date-present nil (let ((date-str (format-time-string (org-time-stamp-format ... ...) (current-time)))) (org-astro--insert-keyword-at-end-of-block "PUBLISH_DATE" date-str) (setq buffer-modified-p t)))))
  (if (string-equal ".mdx" (file-name-extension (buffer-file-name))) (message "Cannot export from an .mdx file. Run this from the...") (let ((info (org-export-get-environment 'astro)) (buffer-modified-p nil)) (save-excursion (let* ((tree (org-element-parse-buffer)) (title-present (plist-get info :title)) (excerpt-present (or (plist-get info :astro-excerpt) (plist-get info :excerpt))) (date-present (or (plist-get info :astro-publish-date) (plist-get info :publish-date) (plist-get info :date)))) (if title-present nil (let* ((headline ...) (title ...)) (if (and title ...) (progn ... ...)))) (if excerpt-present nil (let* ((paragraph ...) (excerpt-text ...)) nil) (if (and excerpt-text (not ...)) (progn (org-astro--insert-keyword-at-end-of-block "EXCERPT" excerpt-text) (setq buffer-modified-p t))))) (if date-present nil (let ((date-str (format-time-string ... ...))) (org-astro--insert-keyword-at-end-of-block "PUBLISH_DATE" date-str) (setq buffer-modified-p t))))))
  org-astro-export-to-mdx()
  (org-open-file (org-astro-export-to-mdx))
  (lambda (_a _s _v _b) (org-open-file (org-astro-export-to-mdx)))(nil nil nil nil)
  org-export-dispatch(nil)
  funcall-interactively(org-export-dispatch nil)
  command-execute(org-export-dispatch)
