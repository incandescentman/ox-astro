Debugger entered--Lisp error: (invalid-read-syntax ")" 172 25)
  read(#<buffer  *load*-143385>)
  #<subr eval-buffer>(#<buffer  *load*-143385> nil "/Users/jay/Library/CloudStorage/Dropbox/github/ox-..." nil t)
  apply(#<subr eval-buffer> (#<buffer  *load*-143385> nil "/Users/jay/Library/CloudStorage/Dropbox/github/ox-..." nil t))
  eval-buffer(#<buffer  *load*-143385> nil "/Users/jay/Library/CloudStorage/Dropbox/github/ox-..." nil t)  ; Reading at buffer position 8526
  load-with-code-conversion("/Users/jay/Library/CloudStorage/Dropbox/github/ox-..." "/Users/jay/Library/CloudStorage/Dropbox/github/ox-..." t t)
  require(ox-astro nil t)
  (not (require 'ox-astro nil t))
  (if (not (require 'ox-astro nil t)) (display-warning 'use-package (format "Cannot load %s" 'ox-astro) :error) (condition-case err (progn (if (run-hook-with-args-until-failure 'use-package--ox-astro--pre-config-hook) (progn t (run-hooks 'use-package--ox-astro--post-config-hook))) t) ((debug error) (funcall use-package--warning320 :config err))))
  (progn (condition-case err (if (run-hook-with-args-until-failure 'use-package--ox-astro--pre-init-hook) (progn (run-hooks 'use-package--ox-astro--post-init-hook))) ((debug error) (funcall use-package--warning320 :init err))) (if (not (require 'ox-astro nil t)) (display-warning 'use-package (format "Cannot load %s" 'ox-astro) :error) (condition-case err (progn (if (run-hook-with-args-until-failure 'use-package--ox-astro--pre-config-hook) (progn t (run-hooks 'use-package--ox-astro--post-config-hook))) t) ((debug error) (funcall use-package--warning320 :config err)))))
  (lambda nil (progn (condition-case err (if (run-hook-with-args-until-failure 'use-package--ox-astro--pre-init-hook) (progn (run-hooks 'use-package--ox-astro--post-init-hook))) ((debug error) (funcall use-package--warning320 :init err))) (if (not (require 'ox-astro nil t)) (display-warning 'use-package (format "Cannot load %s" 'ox-astro) :error) (condition-case err (progn (if (run-hook-with-args-until-failure 'use-package--ox-astro--pre-config-hook) (progn t (run-hooks ...))) t) ((debug error) (funcall use-package--warning320 :config err))))))()
  eval-after-load(ox (lambda nil (progn (condition-case err (if (run-hook-with-args-until-failure 'use-package--ox-astro--pre-init-hook) (progn (run-hooks 'use-package--ox-astro--post-init-hook))) ((debug error) (funcall use-package--warning320 :init err))) (if (not (require 'ox-astro nil t)) (display-warning 'use-package (format "Cannot load %s" 'ox-astro) :error) (condition-case err (progn (if (run-hook-with-args-until-failure ...) (progn t ...)) t) ((debug error) (funcall use-package--warning320 :config err)))))))
  (condition-case err (eval-after-load 'ox #'(lambda nil (progn (condition-case err (if (run-hook-with-args-until-failure ...) (progn ...)) ((debug error) (funcall use-package--warning320 :init err))) (if (not (require ... nil t)) (display-warning 'use-package (format "Cannot load %s" ...) :error) (condition-case err (progn ... t) (... ...)))))) ((debug error) (funcall use-package--warning320 :catch err)))
  load-with-code-conversion("/Users/jay/emacs/emacs-settings/shared-functions.e..." "/Users/jay/emacs/emacs-settings/shared-functions.e..." nil nil)
  load-file("~/emacs/emacs-settings/shared-functions.el")
  org-babel-load-file("~/emacs/emacs-settings/shared-functions.org")
  load-with-code-conversion("/Users/jay/emacs/emacs-settings/spacemacs-new-conf..." "/Users/jay/emacs/emacs-settings/spacemacs-new-conf..." nil nil)
  load("/Users/jay/emacs/emacs-settings/spacemacs-new-conf...")
  (closure (t) nil "Configuration for user code:\nThis function is call..." (if (eq system-type 'darwin) (progn (progn (setq process-adaptive-read-buffering nil) (setq process-connection-type nil)))) (progn (setq org-element-use-cache nil) (setq org-element-cache-persistent nil) (setq org-persist-disable-when-emacs-Q t) (setq org-fold-core-style 'text-properties) (setq org-agenda-inhibit-startup t) (setq org-startup-folded 'showeverything) (setq org-startup-indented nil)) (progn (setq lsp-enable-file-watchers nil) (setq lsp-idle-delay 0.5) (setq read-process-output-max (* 2 1024 1024))) (add-hook 'lsp-after-initialize-hook #'(lambda nil (if (get-buffer-process (current-buffer)) (progn (set-process-query-on-exit-flag (get-buffer-process ...) nil))))) (setq vc-handled-backends '(SVN Hg Bzr RCS CVS SCCS)) (progn (setq tramp-ssh-controlmaster-options "-o ControlPath=none") (setq tramp-verbose 0)) (setq accept-process-output-timeout 5) (progn (setq gc-cons-threshold (* 64 1024 1024)) (setq gc-cons-percentage 0.1)) (progn (setq create-lockfiles nil) (setq auto-save-default t) (setq auto-save-interval 300)) (global-set-key (kbd "C-c C-!") #'(lambda nil (interactive) (save-some-buffers t) (kill-emacs))) (progn (progn :autoload-end (progn (defvar org-config-files-local-mode nil "Non-nil if Org-Config-Files-Local mode is enabled....") (make-variable-buffer-local 'org-config-files-local-mode))) (defalias 'org-config-files-local-mode #'(lambda (&optional arg) "Minor mode for editing configuration files in Org ..." (interactive (list (if current-prefix-arg ... ...))) (let ((last-message ...)) (setq org-config-files-local-mode (cond ... ... ...)) (if (boundp ...) (progn ... ...)) (message "org-config-files-local-mode is now %s" org-config-files-local-mode) (if org-config-files-local-mode (set ... nil) (kill-local-variable ...)) (run-hooks 'org-config-files-local-mode-hook (if org-config-files-local-mode ... ...)) (if (called-interactively-p ...) (progn nil ...))) (force-mode-line-update) org-config-files-local-mode)) :autoload-end (defvar org-config-files-local-mode-hook nil) (if (get 'org-config-files-local-mode-hook 'variable-documentation) nil (put 'org-config-files-local-mode-hook 'variable-documentation "Hook run after entering or leaving `org-config-fil...")) (put 'org-config-files-local-mode-hook 'custom-type 'hook) (put 'org-config-files-local-mode-hook 'standard-value (list nil)) (defvar org-config-files-local-mode-map (let ((m (let (...) (define-key map ... ...) map))) (cond ((keymapp m) m) ((listp m) (easy-mmode-define-keymap m)) (t (error "Invalid keymap %S" m)))) "Keymap for `org-config-files-local-mode'.") (with-no-warnings (add-minor-mode 'org-config-files-local-mode '" OrgCfg" org-config-files-local-mode-map nil nil))) (setq Info-default-directory-list '("/opt/homebrew/share/info")) (setq Info-directory-list '("/opt/homebrew/share/info")) (eval-after-load 'info #'(lambda nil (setq Info-directory-list '("/opt/homebrew/share/info")))) (add-hook 'after-init-hook #'(lambda nil (setq Info-directory-list '("/opt/homebrew/share/info")))) (setq Info-additional-directory-list nil) (add-to-list 'safe-local-variable-values '(lexical-binding . t)) (put 'org-config-files-local-mode 'safe-local-variable #'booleanp) (put 'enable-local-eval 'safe-local-variable #'booleanp) (if (boundp 'safe-local-eval-forms) (progn (add-to-list 'safe-local-eval-forms '(org-config-files-local-mode 1)))) (load "/Users/jay/emacs/emacs-settings/spacemacs-new-conf...") (load "/Users/jay/gnulisp/smart-return.el") (load "/Users/jay/emacs/emacs-settings/elpa-supplement/bu...") (load "/Users/jay/emacs/emacs-settings/elpa-supplement/fr...") (load "/Users/jay/emacs/local-config.el") (defvar my-additional-paths '("/usr/local/bin" "/opt/homebrew/bin" "/Applications/Firefox.app/Contents/MacOS")) (setenv "PATH" (concat (getenv "PATH") ":" (mapconcat 'identity my-additional-paths ":"))) (let ((tail my-additional-paths)) (while tail (let ((path (car tail))) (add-to-list 'exec-path path) (setq tail (cdr tail))))) (message "Final PATH: %s" (getenv "PATH")))()
  apply((closure (t) nil "Configuration for user code:\nThis function is call..." (if (eq system-type 'darwin) (progn (progn (setq process-adaptive-read-buffering nil) (setq process-connection-type nil)))) (progn (setq org-element-use-cache nil) (setq org-element-cache-persistent nil) (setq org-persist-disable-when-emacs-Q t) (setq org-fold-core-style 'text-properties) (setq org-agenda-inhibit-startup t) (setq org-startup-folded 'showeverything) (setq org-startup-indented nil)) (progn (setq lsp-enable-file-watchers nil) (setq lsp-idle-delay 0.5) (setq read-process-output-max (* 2 1024 1024))) (add-hook 'lsp-after-initialize-hook #'(lambda nil (if (get-buffer-process (current-buffer)) (progn (set-process-query-on-exit-flag ... nil))))) (setq vc-handled-backends '(SVN Hg Bzr RCS CVS SCCS)) (progn (setq tramp-ssh-controlmaster-options "-o ControlPath=none") (setq tramp-verbose 0)) (setq accept-process-output-timeout 5) (progn (setq gc-cons-threshold (* 64 1024 1024)) (setq gc-cons-percentage 0.1)) (progn (setq create-lockfiles nil) (setq auto-save-default t) (setq auto-save-interval 300)) (global-set-key (kbd "C-c C-!") #'(lambda nil (interactive) (save-some-buffers t) (kill-emacs))) (progn (progn :autoload-end (progn (defvar org-config-files-local-mode nil "Non-nil if Org-Config-Files-Local mode is enabled....") (make-variable-buffer-local 'org-config-files-local-mode))) (defalias 'org-config-files-local-mode #'(lambda (&optional arg) "Minor mode for editing configuration files in Org ..." (interactive (list ...)) (let (...) (setq org-config-files-local-mode ...) (if ... ...) (message "org-config-files-local-mode is now %s" org-config-files-local-mode) (if org-config-files-local-mode ... ...) (run-hooks ... ...) (if ... ...)) (force-mode-line-update) org-config-files-local-mode)) :autoload-end (defvar org-config-files-local-mode-hook nil) (if (get 'org-config-files-local-mode-hook 'variable-documentation) nil (put 'org-config-files-local-mode-hook 'variable-documentation "Hook run after entering or leaving `org-config-fil...")) (put 'org-config-files-local-mode-hook 'custom-type 'hook) (put 'org-config-files-local-mode-hook 'standard-value (list nil)) (defvar org-config-files-local-mode-map (let ((m (let ... ... map))) (cond ((keymapp m) m) ((listp m) (easy-mmode-define-keymap m)) (t (error "Invalid keymap %S" m)))) "Keymap for `org-config-files-local-mode'.") (with-no-warnings (add-minor-mode 'org-config-files-local-mode '" OrgCfg" org-config-files-local-mode-map nil nil))) (setq Info-default-directory-list '("/opt/homebrew/share/info")) (setq Info-directory-list '("/opt/homebrew/share/info")) (eval-after-load 'info #'(lambda nil (setq Info-directory-list '("/opt/homebrew/share/info")))) (add-hook 'after-init-hook #'(lambda nil (setq Info-directory-list '("/opt/homebrew/share/info")))) (setq Info-additional-directory-list nil) (add-to-list 'safe-local-variable-values '(lexical-binding . t)) (put 'org-config-files-local-mode 'safe-local-variable #'booleanp) (put 'enable-local-eval 'safe-local-variable #'booleanp) (if (boundp 'safe-local-eval-forms) (progn (add-to-list 'safe-local-eval-forms '(org-config-files-local-mode 1)))) (load "/Users/jay/emacs/emacs-settings/spacemacs-new-conf...") (load "/Users/jay/gnulisp/smart-return.el") (load "/Users/jay/emacs/emacs-settings/elpa-supplement/bu...") (load "/Users/jay/emacs/emacs-settings/elpa-supplement/fr...") (load "/Users/jay/emacs/local-config.el") (defvar my-additional-paths '("/usr/local/bin" "/opt/homebrew/bin" "/Applications/Firefox.app/Contents/MacOS")) (setenv "PATH" (concat (getenv "PATH") ":" (mapconcat 'identity my-additional-paths ":"))) (let ((tail my-additional-paths)) (while tail (let ((path (car tail))) (add-to-list 'exec-path path) (setq tail (cdr tail))))) (message "Final PATH: %s" (getenv "PATH"))) nil)
  (let ((stime (current-time))) (apply f args) (setq dotspacemacs--user-config-elapsed-time (float-time (time-subtract (current-time) stime))))
  dotspacemacs//profile-user-config((closure (t) nil "Configuration for user code:\nThis function is call..." (if (eq system-type 'darwin) (progn (progn (setq process-adaptive-read-buffering nil) (setq process-connection-type nil)))) (progn (setq org-element-use-cache nil) (setq org-element-cache-persistent nil) (setq org-persist-disable-when-emacs-Q t) (setq org-fold-core-style 'text-properties) (setq org-agenda-inhibit-startup t) (setq org-startup-folded 'showeverything) (setq org-startup-indented nil)) (progn (setq lsp-enable-file-watchers nil) (setq lsp-idle-delay 0.5) (setq read-process-output-max (* 2 1024 1024))) (add-hook 'lsp-after-initialize-hook #'(lambda nil (if (get-buffer-process (current-buffer)) (progn (set-process-query-on-exit-flag ... nil))))) (setq vc-handled-backends '(SVN Hg Bzr RCS CVS SCCS)) (progn (setq tramp-ssh-controlmaster-options "-o ControlPath=none") (setq tramp-verbose 0)) (setq accept-process-output-timeout 5) (progn (setq gc-cons-threshold (* 64 1024 1024)) (setq gc-cons-percentage 0.1)) (progn (setq create-lockfiles nil) (setq auto-save-default t) (setq auto-save-interval 300)) (global-set-key (kbd "C-c C-!") #'(lambda nil (interactive) (save-some-buffers t) (kill-emacs))) (progn (progn :autoload-end (progn (defvar org-config-files-local-mode nil "Non-nil if Org-Config-Files-Local mode is enabled....") (make-variable-buffer-local 'org-config-files-local-mode))) (defalias 'org-config-files-local-mode #'(lambda (&optional arg) "Minor mode for editing configuration files in Org ..." (interactive (list ...)) (let (...) (setq org-config-files-local-mode ...) (if ... ...) (message "org-config-files-local-mode is now %s" org-config-files-local-mode) (if org-config-files-local-mode ... ...) (run-hooks ... ...) (if ... ...)) (force-mode-line-update) org-config-files-local-mode)) :autoload-end (defvar org-config-files-local-mode-hook nil) (if (get 'org-config-files-local-mode-hook 'variable-documentation) nil (put 'org-config-files-local-mode-hook 'variable-documentation "Hook run after entering or leaving `org-config-fil...")) (put 'org-config-files-local-mode-hook 'custom-type 'hook) (put 'org-config-files-local-mode-hook 'standard-value (list nil)) (defvar org-config-files-local-mode-map (let ((m (let ... ... map))) (cond ((keymapp m) m) ((listp m) (easy-mmode-define-keymap m)) (t (error "Invalid keymap %S" m)))) "Keymap for `org-config-files-local-mode'.") (with-no-warnings (add-minor-mode 'org-config-files-local-mode '" OrgCfg" org-config-files-local-mode-map nil nil))) (setq Info-default-directory-list '("/opt/homebrew/share/info")) (setq Info-directory-list '("/opt/homebrew/share/info")) (eval-after-load 'info #'(lambda nil (setq Info-directory-list '("/opt/homebrew/share/info")))) (add-hook 'after-init-hook #'(lambda nil (setq Info-directory-list '("/opt/homebrew/share/info")))) (setq Info-additional-directory-list nil) (add-to-list 'safe-local-variable-values '(lexical-binding . t)) (put 'org-config-files-local-mode 'safe-local-variable #'booleanp) (put 'enable-local-eval 'safe-local-variable #'booleanp) (if (boundp 'safe-local-eval-forms) (progn (add-to-list 'safe-local-eval-forms '(org-config-files-local-mode 1)))) (load "/Users/jay/emacs/emacs-settings/spacemacs-new-conf...") (load "/Users/jay/gnulisp/smart-return.el") (load "/Users/jay/emacs/emacs-settings/elpa-supplement/bu...") (load "/Users/jay/emacs/emacs-settings/elpa-supplement/fr...") (load "/Users/jay/emacs/local-config.el") (defvar my-additional-paths '("/usr/local/bin" "/opt/homebrew/bin" "/Applications/Firefox.app/Contents/MacOS")) (setenv "PATH" (concat (getenv "PATH") ":" (mapconcat 'identity my-additional-paths ":"))) (let ((tail my-additional-paths)) (while tail (let ((path (car tail))) (add-to-list 'exec-path path) (setq tail (cdr tail))))) (message "Final PATH: %s" (getenv "PATH"))))
  apply(dotspacemacs//profile-user-config (closure (t) nil "Configuration for user code:\nThis function is call..." (if (eq system-type 'darwin) (progn (progn (setq process-adaptive-read-buffering nil) (setq process-connection-type nil)))) (progn (setq org-element-use-cache nil) (setq org-element-cache-persistent nil) (setq org-persist-disable-when-emacs-Q t) (setq org-fold-core-style 'text-properties) (setq org-agenda-inhibit-startup t) (setq org-startup-folded 'showeverything) (setq org-startup-indented nil)) (progn (setq lsp-enable-file-watchers nil) (setq lsp-idle-delay 0.5) (setq read-process-output-max (* 2 1024 1024))) (add-hook 'lsp-after-initialize-hook #'(lambda nil (if (get-buffer-process (current-buffer)) (progn (set-process-query-on-exit-flag ... nil))))) (setq vc-handled-backends '(SVN Hg Bzr RCS CVS SCCS)) (progn (setq tramp-ssh-controlmaster-options "-o ControlPath=none") (setq tramp-verbose 0)) (setq accept-process-output-timeout 5) (progn (setq gc-cons-threshold (* 64 1024 1024)) (setq gc-cons-percentage 0.1)) (progn (setq create-lockfiles nil) (setq auto-save-default t) (setq auto-save-interval 300)) (global-set-key (kbd "C-c C-!") #'(lambda nil (interactive) (save-some-buffers t) (kill-emacs))) (progn (progn :autoload-end (progn (defvar org-config-files-local-mode nil "Non-nil if Org-Config-Files-Local mode is enabled....") (make-variable-buffer-local 'org-config-files-local-mode))) (defalias 'org-config-files-local-mode #'(lambda (&optional arg) "Minor mode for editing configuration files in Org ..." (interactive (list ...)) (let (...) (setq org-config-files-local-mode ...) (if ... ...) (message "org-config-files-local-mode is now %s" org-config-files-local-mode) (if org-config-files-local-mode ... ...) (run-hooks ... ...) (if ... ...)) (force-mode-line-update) org-config-files-local-mode)) :autoload-end (defvar org-config-files-local-mode-hook nil) (if (get 'org-config-files-local-mode-hook 'variable-documentation) nil (put 'org-config-files-local-mode-hook 'variable-documentation "Hook run after entering or leaving `org-config-fil...")) (put 'org-config-files-local-mode-hook 'custom-type 'hook) (put 'org-config-files-local-mode-hook 'standard-value (list nil)) (defvar org-config-files-local-mode-map (let ((m (let ... ... map))) (cond ((keymapp m) m) ((listp m) (easy-mmode-define-keymap m)) (t (error "Invalid keymap %S" m)))) "Keymap for `org-config-files-local-mode'.") (with-no-warnings (add-minor-mode 'org-config-files-local-mode '" OrgCfg" org-config-files-local-mode-map nil nil))) (setq Info-default-directory-list '("/opt/homebrew/share/info")) (setq Info-directory-list '("/opt/homebrew/share/info")) (eval-after-load 'info #'(lambda nil (setq Info-directory-list '("/opt/homebrew/share/info")))) (add-hook 'after-init-hook #'(lambda nil (setq Info-directory-list '("/opt/homebrew/share/info")))) (setq Info-additional-directory-list nil) (add-to-list 'safe-local-variable-values '(lexical-binding . t)) (put 'org-config-files-local-mode 'safe-local-variable #'booleanp) (put 'enable-local-eval 'safe-local-variable #'booleanp) (if (boundp 'safe-local-eval-forms) (progn (add-to-list 'safe-local-eval-forms '(org-config-files-local-mode 1)))) (load "/Users/jay/emacs/emacs-settings/spacemacs-new-conf...") (load "/Users/jay/gnulisp/smart-return.el") (load "/Users/jay/emacs/emacs-settings/elpa-supplement/bu...") (load "/Users/jay/emacs/emacs-settings/elpa-supplement/fr...") (load "/Users/jay/emacs/local-config.el") (defvar my-additional-paths '("/usr/local/bin" "/opt/homebrew/bin" "/Applications/Firefox.app/Contents/MacOS")) (setenv "PATH" (concat (getenv "PATH") ":" (mapconcat 'identity my-additional-paths ":"))) (let ((tail my-additional-paths)) (while tail (let ((path (car tail))) (add-to-list 'exec-path path) (setq tail (cdr tail))))) (message "Final PATH: %s" (getenv "PATH"))) nil)
  dotspacemacs/user-config()
  (condition-case err (dotspacemacs/user-config) ((debug error) (configuration-layer//increment-error-count) (spacemacs-buffer/append (format "Error in %s: %s\n" '"dotspacemacs/user-config" (error-message-string err)) t)))
  (progn (condition-case err (dotspacemacs/user-config) ((debug error) (configuration-layer//increment-error-count) (spacemacs-buffer/append (format "Error in %s: %s\n" '"dotspacemacs/user-config" (error-message-string err)) t))))
  (if (fboundp 'dotspacemacs/user-config) (progn (condition-case err (dotspacemacs/user-config) ((debug error) (configuration-layer//increment-error-count) (spacemacs-buffer/append (format "Error in %s: %s\n" '"dotspacemacs/user-config" (error-message-string err)) t)))))
  (progn (if "Calling dotfile user config..." (progn (spacemacs-buffer/message "Calling dotfile user config..."))) (if (fboundp 'dotspacemacs/user-config) (progn (condition-case err (dotspacemacs/user-config) ((debug error) (configuration-layer//increment-error-count) (spacemacs-buffer/append (format "Error in %s: %s\n" '"dotspacemacs/user-config" (error-message-string err)) t))))))
  spacemacs/startup-hook()
  run-hooks(emacs-startup-hook term-setup-hook)
  #f(compiled-function () #<bytecode 0x41bfb339e6a582a>)()
  normal-top-level()
