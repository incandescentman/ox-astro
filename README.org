* ox-astro: An Org Mode Exporter for Astro MDX

~ox-astro.el~ is a specialized back-end for the Org export engine, designed to convert Org mode files into Astro-compatible MDX (~.mdx~) files. It streamlines the process of writing blog posts in Org mode for publication on an Astro website.

The exporter automates many of the tedious parts of content creation, including automatic front-matter generation (written back to your .org source file), advanced image handling, and Markdown-specific formatting, allowing you to focus on writing.

* Installation and Setup

To use this exporter, save the following files to your Emacs load path:
- ~ox-astro.el~ (the main file)
- ~ox-astro-config.el~ (configuration options)
- ~ox-astro-helpers.el~ (internal helper functions)
- ~ox-astro-handlers.el~ (export and filter handlers)
- ~ox-astro-table-handlers.el~ (table processing)
- ~ox-astro-image-handlers.el~ (image handling)
- ~ox-astro-pdf-handlers.el~ (PDF handling)

Then, add the following to your Emacs configuration (~init.el~):

#+begin_src emacs-lisp
(with-eval-after-load 'ox
  (require 'ox-astro))
#+end_src

* Core Features

- **MDX Export**: Converts Org files to ~.mdx~ format, ready for Astro.
- **Automatic Front Matter**: Generates YAML front matter from Org keywords and content.
- **Advanced Image Handling**: Automatically detects, copies, and processes images from anywhere on your filesystem, converting them into optimized Astro `<Image>` components.
- **Interactive Workflow**: Prompts for a destination folder if one isn't specified, making it easy to work with multiple Astro projects.
- **Advanced Formatting**: Intelligently handles Org-specific syntax (like TODOs and tables) and converts it to the correct Markdown equivalent.
- **org-roam Integration**: Respects org-roam file structure and properties blocks.
- **ID Link Resolution**: Converts `[[id:...]]` org-roam links into relative Markdown links that work out of the box in Astro.
- **Subtree Export**: Export individual subtrees as standalone blog posts.
- **Mixed Link Support**: Preserves existing Markdown links while processing Org links and converting raw URLs into custom components.
- **Slug Filenames for Subtrees**: When exporting a subtree (or when the buffer is narrowed to a subtree), the output filename uses the subtree's ~#+SLUG~ as ~slug.mdx~.

* Configuration

Before using ox-astro, you need to configure your project paths:

1. Run ~M-x customize-group RET org-export-astro RET~
2. Edit the "Org Astro Known Posts Folders" setting
3. Add your Astro project paths with memorable nicknames
4. Set ~org-astro-source-root-folder~ to the directory that contains your org-roam notes (used for ID link resolution)

** Basic Configuration

Example configuration for simple folder mapping:
#+begin_src emacs-lisp
(setq org-astro-known-posts-folders
      '(("blog" . (:path "~/projects/my-blog/src/content/blog"))
        ("docs" . (:path "~/projects/my-docs/src/content/docs"))))
#+end_src

** Advanced: Folder Structure Preservation

You can optionally preserve your source folder structure when exporting to specific destinations. This is useful when you want to maintain the same directory organization in your Astro project as in your Org files.

#+begin_src emacs-lisp
;; Define where your source Org files are located
(setq org-astro-source-root-folder
      "~/org-files/roam")

;; Configure destinations with optional folder structure preservation
(setq org-astro-known-posts-folders
      '(("blog" . (:path "~/projects/my-blog/src/content/blog"))
        ("docs" . (:path "~/projects/my-docs/src/content/docs"))
        ("roam-site" . (:path "~/projects/roam-site/src/content"
                        :preserve-folder-structure t))))
#+end_src

With this configuration:
- Files exported to "blog" or "docs" go directly into their respective folders
- Files exported to "roam-site" preserve their directory structure:
  - ~~/org-files/roam/journal/2025-09-03.org~ → ~~/projects/roam-site/src/content/journal/2025-09-03.mdx~
  - ~~/org-files/roam/notes/emacs.org~ → ~~/projects/roam-site/src/content/notes/emacs.mdx~

* How to Use

1.  Open the Org file you want to export.
2.  Set the destination folder using the `#+DESTINATION_FOLDER` (or `#+DESTINATION-FOLDER`) keyword. You can use a nickname from your `org-astro-known-posts-folders` list or provide a full, absolute path to any directory.
3.  Run the command ~M-x org-astro-export-to-mdx~.
4.  If the destination is not specified in the file, you will be prompted to select one from your pre-configured list.
5.  The ~.mdx~ file will be generated in the specified destination.

** Cross-Note Links

- Ensure each linked note has an =~:ID:= property in its PROPERTIES drawer
- Set ~org-astro-source-root-folder~ so the exporter can build a cross-file ID map
- After export, review =broken-links.json= in the destination root for any unresolved IDs
- Missing IDs appear as warnings and degrade to readable plain text; add the target note and re-export to fix the link

** Subtree Export

You can export individual subtrees as standalone blog posts. This is especially useful for org-roam workflows where you might have multiple blog posts as subtrees in a single file.

1.  Position your cursor on the heading you want to export.
2.  Run ~M-x org-narrow-to-subtree~ to narrow to just that subtree. (Optional: You can also export the subtree via prefix argument ~C-u~.)
3.  Run ~M-x org-astro-export-to-mdx~. If the buffer is narrowed or you use the subtree prefix arg, the exporter treats it as a subtree export.
4.  The output filename will use the subtree's ~#+SLUG~ (e.g., ~cascais.mdx~). If ~#+SLUG~ is missing, it is generated from the subtree title.
5.  Keywords like ~#+TITLE~, ~#+SLUG~, ~#+EXCERPT~, and ~#+PUBLISH_DATE~ are inserted within the subtree, just below the heading (and after any ~:PROPERTIES:~ block).

** Filename Generation

- **Full-file exports**: Uses Org's default ~org-export-output-file-name~ result (with minor sanitization like replacing underscores with hyphens).
- **Subtree/narrowed exports**: Searches for ~#+SLUG:~ in the current narrowed region first, then in the full buffer. If found and non-empty, the final filename is ~slug.mdx~.
- **Slug creation**: If the subtree lacks ~#+TITLE~, the exporter derives a title from the first heading and inserts both ~#+TITLE~ and a slugified ~#+SLUG~ into the source.

* Front Matter Generation

The exporter automatically generates YAML front matter based on keywords in your Org file.

**Supported Keys:**
| Org Keyword          | YAML Key    | Description                                     |
|----------------------+-------------+-------------------------------------------------|
| ~#+TITLE~              | ~title~       | The title of the post.                          |
| ~#+AUTHOR~             | ~author~      | The author's name. Defaults to "Jay Dixit".     |
| ~#+DATE~               | ~publishDate~ | The publication date.                           |
| ~#+EXCERPT~            | ~excerpt~     | A short summary of the post.                    |
| ~#+COVER_IMAGE~        | ~image~       | Path to the post's cover image.                 |
| ~#+COVER_IMAGE_ALT~    | ~imageAlt~    | Alt text for the cover image.                   |
| ~#+TAGS~               | ~tags~        | A comma/space/newline-separated list of tags. Use quotes for multi-word tags: ~#+TAGS: "web development", astro~ |
| ~#+CATEGORIES~         | ~categories~  | A comma/space/newline-separated list of categories. Quotes preserve spaces. |
| ~#+AUTHOR_IMAGE~       | ~authorImage~ | Path to the author's image.                     |
| ~#+VISIBILITY~         | ~visibility~  | Visibility channel for the post. Common values: ~blog~ (default), ~hidden~, ~example~; any arbitrary string is allowed. |
| ~#+STATUS~             | ~draft~       | Set to "draft" - post files are created but marked for exclusion from production builds. |
| ~#+SLUG~               | ~slug~        | URL-friendly slug for the post.                 |
| ~#+DESTINATION_FOLDER~ (alias: ~#+DESTINATION-FOLDER~) | (none)      | Specifies the export destination folder.        |

** Tags & Categories

- Sources: Use `#+ASTRO_TAGS` or `#+TAGS` for tags; `#+ASTRO_CATEGORIES` or `#+CATEGORIES` for categories. The `ASTRO_*` variants take precedence when both are present.
- Separators: Commas, spaces, or newlines are all accepted between items.
- Multi‑word items: Wrap in quotes to preserve spaces. Double or single quotes are supported; quotes are stripped.
- Scope: Place the keyword inside the subtree you export, or at the top of the file for full‑file exports. `#+FILETAGS` is not used for MDX front matter.

Examples:

#+begin_src org
#+TAGS: astro, markdown, "web development"
#+CATEGORIES: tutorials, "long form"

#+ASTRO_TAGS: 'ai therapy', productivity, "prompt engineering"
#+ASTRO_CATEGORIES: "learning notes" "reference"
#+end_src

Resulting front matter lists:

#+begin_src yaml
tags:
  - astro
  - markdown
  - web development
categories:
  - tutorials
  - long form
#+end_src

**Automatic Front Matter Generation:**
The exporter automatically adds missing front matter to your .org source file during export:
- If ~#+TITLE~ is not found, it uses the first level-1 headline and adds it to the file.
- In a narrowed subtree without ~#+TITLE~, the title is derived from the subtree heading. The exporter inserts ~#+TITLE~ and a ~#+SLUG~ for that subtree.
- If ~#+EXCERPT~ is not found, it generates one from the first paragraph (excluding any image tags) and adds it to the file.
- If ~#+DATE~ is not found, it uses the current time and adds ~#+PUBLISH_DATE~ to the file.
- If ~#+SLUG~ is not found but ~#+TITLE~ exists, it generates a URL-friendly slug and adds it to the file.
- If ~#+COVER_IMAGE_ALT~ is not found, it generates a human-readable alt text from the image's filename.

* Advanced Image Handling

The exporter simplifies image management by automatically processing and importing them. It uses Astro's built-in `<Image>` component to ensure all images are optimized.

The process is the same for cover images and images in the body of the text:
1.  **Detection**: The exporter finds images specified as standard Org links (`[[file:...]]`) *and* raw absolute paths (e.g., `/Users/jay/Downloads/my-pic.png`) placed on their own line.
2.  **Copying**: The image file is copied from its original location to your Astro project's `src/assets/images/posts/` directory. Filenames are sanitized to be web-friendly.
3.  **Import Generation**: An ES6 import statement is added to the top of the `.mdx` file. The path uses Astro's `~/` alias for robustness.
    #+begin_src javascript
    import { Image } from 'astro:assets';
    import myPic from '~/assets/images/posts/my-pic.png';
    #+end_src
4.  **Component Conversion**: The Org link or raw path is converted into an `<Image>` component that uses the imported image variable, ready for Astro's optimization pipeline.
    #+begin_src html
    <Image src={myPic} alt="My pic" />
    #+end_src

**Example Workflow**

Simply drop an absolute path to an image on its own line:
#+begin_example
This is my introductory paragraph.

/Users/jay/Pictures/my-diagram.png

And the text continues here.
#+end_example

The exporter handles the rest automatically, making it incredibly fast to add images to your content.

* Link Handling

The exporter distinguishes between standard links with descriptions and raw, bare URLs.

**Standard Links**
A standard Org link with a description is converted directly to its Markdown equivalent.
- *Org*: ~[[https://google.com][Search with Google]]~
- *MDX*: ~[Search with Google](https://google.com)~

**Preserve Existing Markdown Links**
If your Org text already includes Markdown-formatted links, they are preserved verbatim. This allows pasting Markdown prose directly into Org without reformatting.

**Raw URLs (LinkPeek)**
A bare URL without a description is automatically converted into a custom ~<LinkPeek>~ component, which can be styled to provide rich link previews.
- *Org*: ~https://google.com~
- *MDX*: ~<LinkPeek href="https://google.com"></LinkPeek>~

When any ~<LinkPeek>~ is emitted, ox-astro automatically adds the necessary import to the top of the MDX file.

** PDF Handling (Automatic)**

The exporter provides automatic PDF handling that mirrors the image processing system. PDFs are automatically detected, copied, and linked with proper paths.

*** How It Works

When you link to a PDF file in your Org document (e.g., from your Downloads folder), the exporter:

1. **Detects** PDF links in your document
2. **Copies** the PDF to your Astro app's ~public/pdfs/{slug}/~ folder
3. **Updates** your source Org file with the new path
4. **Exports** the correct site-relative path in the MDX output

*** Example Workflow

Simply add a link to any PDF on your system:
#+begin_example
Check out this document:
[[/Users/jay/Downloads/my-presentation.pdf]]
#+end_example

After export:
- The PDF is copied to: ~public/pdfs/{post-slug}/my-presentation.pdf~
- Your Org source is updated to: ~[[/path/to/app/public/pdfs/{post-slug}/my-presentation.pdf]]~
- The MDX output contains: ~[my-presentation](/pdfs/{post-slug}/my-presentation.pdf)~

*** Supported Input Formats
- Local absolute paths: ~[[/Users/jay/Downloads/document.pdf]]~
- File protocol: ~[[file:/Users/jay/Downloads/document.pdf]]~
- Already processed paths: ~[[/path/to/app/public/pdfs/slug/document.pdf]]~ (detected and converted to site path)
- Site paths: ~[[/pdfs/document.pdf]]~ (passed through unchanged)

*** Technical Details
- **Destination**: ~public/pdfs/{slug}/~ where slug is derived from the post
- **Path encoding**: Spaces in filenames are URL-encoded as ~%20~ in the final MDX
- **Label normalization**: PDF link labels are cleaned up (removes special characters, normalizes "PDF:" spacing)
- **Source updates**: The Org source file is automatically updated with the new path after copying

* Post Visibility Options

~ox-astro~ supports several options for controlling how and where posts appear on your website. These settings add metadata to the front matter that your Astro site can use to filter content appropriately.

** Default (Blog)
By default, posts appear in the main blog list. This happens when ~#+VISIBILITY~ is omitted, or explicitly set to ~blog~:
#+begin_src org
#+VISIBILITY: blog
#+end_src

*Effect:* The MDX front matter may include ~visibility: blog~ (if specified). Your site should treat this as a normal public blog post.

**Completely Hidden Posts**
#+begin_src org
#+VISIBILITY: hidden
#+end_src

*Effect:* The MDX file is created with ~visibility: hidden~ in the front matter. Your Astro site should exclude these posts from all listings, feeds, sitemaps, and search results. The post files exist but are treated as if they don't exist publicly.

**Draft Posts**  
#+begin_src org
#+STATUS: draft
#+end_src

*Effect:* The MDX file is created with ~draft: true~ in the front matter. Typically used with Astro's build process to exclude draft posts from production builds while keeping them visible in development. The post is "unpublished" - it exists in your content but won't appear on the live site until you remove the draft status.

**Hide From Main Feed**
#+begin_src org
#+VISIBILITY: example
#+end_src

*Effect:* The MDX file is created with ~visibility: example~ in the front matter. Configure your site to treat non-~blog~ visibilities as excluded from the main feed while remaining visible on tag/category pages. You can choose any string for specialized channels (e.g., ~reference~, ~til~, ~notes~).

* Special Formatting Rules

~ox-astro~ includes several rules to convert Org syntax to modern Markdown.

**TODO Items**
Org TODO items are converted into Markdown task lists.
- ~*** TODO Buy milk~ becomes ~- [ ] Buy milk~
- ~*** DONE Pay bills~ becomes ~- [x] Pay bills~

**Tables**
Org tables are converted to clean Markdown table format instead of HTML.

* Customization

You can customize the exporter's behavior using ~M-x customize-group~ and selecting ~org-export-astro~.

- ~org-astro-known-posts-folders~ :: A list of your frequently used destination folders, each with a convenient nickname.
- ~org-astro-default-author-image~ :: Sets a default path for the author's image.
- ~org-astro-date-format~ :: A string to control the format of the ~publishDate~ in the front matter.
