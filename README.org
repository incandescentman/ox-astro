* ox-astro: An Org Mode Exporter for Astro MDX

~ox-astro.el~ is a specialized back-end for the Org export engine, designed to convert Org mode files into Astro-compatible MDX (~.mdx~) files. It streamlines the process of writing blog posts in Org mode for publication on an Astro website.

The exporter automates many of the tedious parts of content creation, including front-matter generation, image handling, and Markdown-specific formatting, allowing you to focus on writing.

* Installation and Setup

To use this exporter, save the following files to your Emacs load path:
- ~ox-astro.el~ (the main file)
- ~ox-astro-config.el~ (configuration options)
- ~ox-astro-helpers.el~ (internal helper functions)
- ~ox-astro-handlers.el~ (export and filter handlers)

Then, add the following to your Emacs configuration (~init.el~):

#+begin_src emacs-lisp
(with-eval-after-load 'ox
  (require 'ox-astro))
#+end_src

* Core Features

- **MDX Export**: Converts Org files to ~.mdx~ format, ready for Astro.
- **Automatic Front Matter**: Generates YAML front matter from Org keywords and content.
- **Smart Image Handling**: Automatically copies linked images to your Astro project's assets folder and generates the necessary import statements.
- **Interactive Workflow**: Prompts for a destination folder if one isn't specified, making it easy to work with multiple Astro projects.
- **Advanced Formatting**: Intelligently handles Org-specific syntax and converts it to the correct Markdown equivalent.
- **org-roam Integration**: Respects org-roam file structure and properties blocks.
- **Subtree Export**: Export individual subtrees as standalone blog posts.
- **Markdown Table Support**: Converts tables to clean Markdown format instead of HTML.
- **Mixed Link Support**: Preserves existing Markdown links while processing Org links.

* How to Use

1.  Open the Org file you want to export.
2.  Set the destination folder using the `#+DESTINATION_FOLDER` keyword. You can use a nickname from your `org-astro-known-posts-folders` list or provide a full, absolute path to any directory.
3.  Run the command ~M-x org-astro-export-to-mdx~.
4.  If the destination is not specified in the file, you will be prompted to select one from your pre-configured list.
5.  The ~.mdx~ file will be generated in the specified destination.

** Subtree Export

You can export individual subtrees as standalone blog posts. This is especially useful for org-roam workflows where you might have multiple blog posts as subtrees in a single file.

1.  Position your cursor on the heading you want to export.
2.  Run ~M-x org-narrow-to-subtree~ to narrow to just that subtree.
3.  Run ~M-x org-astro-export-to-mdx~ with the subtree parameter: ~C-u M-x org-astro-export-to-mdx~
4.  Keywords like ~#+EXCERPT~ and ~#+PUBLISH_DATE~ will be inserted within the subtree, below the heading.

Example subtree structure after export:
#+begin_example
* My Blog Post
:PROPERTIES:
:ID: 20250815T150000.123456
:END:
#+DESTINATION_FOLDER: jaydocs
#+EXCERPT: This is generated from the first paragraph
#+PUBLISH_DATE: [2025-08-15 Fri]

Content of the blog post goes here...
#+end_example

* Front Matter Generation

The exporter automatically generates YAML front matter based on keywords in your Org file.

**Supported Keys:**
| Org Keyword          | YAML Key    | Description                                 |
|----------------------+-------------+---------------------------------------------|
| ~#+TITLE~              | ~title~       | The title of the post.                      |
| ~#+AUTHOR~             | ~author~      | The author's name. Defaults to "Jay Dixit". |
| ~#+DATE~               | ~publishDate~ | The publication date.                       |
| ~#+EXCERPT~            | ~excerpt~     | A short summary of the post.                |
| ~#+COVER_IMAGE~        | ~image~       | Path to the post's cover image.             |
| ~#+COVER_IMAGE_ALT~    | ~imageAlt~    | Alt text for the cover image.               |
| ~#+TAGS~               | ~tags~        | A comma- or space-separated list of tags.   |
| ~#+AUTHOR_IMAGE~       | ~authorImage~ | Path to the author's image.                 |
| ~#+VISIBILITY~         | ~hidden~      | Set to "hidden" to mark post as hidden.     |
| ~#+STATUS~             | ~draft~       | Set to "draft" to mark post as draft.       |
| ~#+DESTINATION_FOLDER~ | (none)      | Specifies the export destination folder.    |

**Fallback Logic:**
- If ~#+TITLE~ is not found, the exporter uses the first level-1 headline in the buffer (or the top-level headline if the buffer is narrowed).
- If ~#+EXCERPT~ is not found, it uses the first paragraph of the document.
- If ~#+DATE~ is not found, it uses the current time.
- If ~#+COVER_IMAGE_ALT~ is not found, it generates a human-readable alt text from the image's filename (e.g., ~my-awesome-image.png~ becomes "My awesome image").

** org-roam Integration

ox-astro is designed to work seamlessly with org-roam. It respects org-roam file structures and places export keywords in appropriate locations:

#+begin_example
:PROPERTIES:
:ID:       20250815T145942.876996
:END:
#+TITLE: 2025-08-15
#+FILETAGS: :journal:

#+EXCERPT: Generated excerpt goes here
#+PUBLISH_DATE: [2025-08-15 Fri]

- Links ::

Your content starts here...
#+end_example

The exporter will:
- Skip over the ~:PROPERTIES:~ block when inserting keywords
- Place new keywords after existing ~#+~ keywords  
- Maintain the org-roam file structure integrity

* Image Handling

The exporter simplifies image management by automatically processing and importing them. It uses Astro's built-in `<Image>` component to ensure all images are optimized.

**Cover Image**

For the cover image specified by ~#+COVER_IMAGE~, the exporter automatically:
1.  Copies the image file to your Astro project's ~src/assets/images/posts/~ directory.
2.  Adds an import statement to the top of the ~.mdx~ file. The variable name is derived from the image's filename (e.g., ~my-pic.png~ becomes ~myPic~).
   #+begin_src javascript
   import myPic from '~/assets/images/posts/my-pic.png';
   #+end_src

**Body Images**

When you link to a local image in the body of your Org file (e.g., `[[file:./images/post-image.png]]`), the exporter performs several actions automatically:

1.  *Copying*: The image is copied to the `src/assets/images/posts/` directory in your Astro project.
2.  *Import Generation*: An import statement for the `<Image>` component and the specific image is added to the top of the MDX file. The variable name is derived from the image's filename (e.g., `post-image.png` becomes `postImage`).
    #+begin_src javascript
    import { Image } from 'astro:assets';
    import postImage from '~/assets/images/posts/post-image.png';
    #+end_src
3.  *Link Conversion*: The Org link is converted into an `<Image>` component that uses the imported image variable, making it ready for Astro's image processing pipeline.
    #+begin_src html
    <Image src={postImage} alt="Post image" />
    #+end_src

This process applies to all local images found in the document body, streamlining the use of illustrations, diagrams, and other graphics in your posts.

**Raw Image Paths in Body**

You can also include an image by placing its raw file path on a line by itself. This is useful for quickly adding images without using Org's link syntax.

For example:
#+begin_example
This is my introductory paragraph.

/Users/jay/Pictures/my-diagram.png

And the text continues here.
#+end_example

The exporter will automatically:
1.  Detect that `/Users/jay/Pictures/my-diagram.png` is an image.
2.  Copy it to the `src/assets/images/posts/` directory.
3.  Generate an import for it (e.g., `import myDiagram from '...'`).
4.  Replace the path with the proper `<Image src={myDiagram} ... />` component.

* Link Handling

The exporter distinguishes between standard links with descriptions and raw, bare URLs.

**Standard Links**
A standard Org link with a description is converted directly to its Markdown equivalent.
- *Org*: ~[[https://google.com][Search with Google]]~
- *MDX*: ~[Search with Google](https://google.com)~

**Preserve Existing Markdown Links**
If your Org text already includes Markdown-formatted links, they are preserved verbatim:
- Inline: ~[Label](https://example.com)~
- Reference: ~[Label][1]~ (with definitions at the bottom)
This allows pasting Markdown prose directly into Org without reformatting.

**Markdown Reference Definitions**
Lines like ~[1]: https://example.com "Optional Title"~ are exported literally. They are not treated as raw URLs, so no ~LinkPeek~ transformation occurs.

**Raw URLs (LinkPeek)**
A bare URL without a description is automatically converted into a custom ~<LinkPeek>~ component, which can be styled to provide rich link previews.
- *Org*: ~https://google.com~
- *MDX*: ~<LinkPeek href="https://google.com"></LinkPeek>~

When any ~<LinkPeek>~ is emitted, ox-astro automatically adds the import at the top of the MDX file:
#+begin_src javascript
import LinkPeek from '../../components/ui/LinkPeek.astro';
#+end_src

This ensures that you have fine-grained control over how links appear on your site and that required imports are included automatically.

* Special Formatting Rules

~ox-astro~ includes several rules to convert Org syntax to modern Markdown.

**TODO Items**
Org TODO items are converted into Markdown task lists.
- ~*** TODO Buy milk~ becomes ~- [ ] Buy milk~
- ~*** DONE Pay bills~ becomes ~- [x] Pay bills~

**Code Blocks (~user~, ~prompt~, ~quote~)**
Source blocks with the language ~user~, ~prompt~, or ~quote~ receive special treatment to format them as conversational prompts or pull quotes.
- They are exported as fenced code blocks (e.g., ~~~user).
- Any ~---~ within the block is converted to an em dash (â€”).
- Blank lines inside the block are preserved.
- Extraneous newlines at the end of the block are removed.

**Example Blocks**
Org example blocks (lines prefixed with ~:~) are converted to Markdown blockquotes.
: This is an example.
becomes:
> This is an example.

**Raw URLs**
Bare URLs in your Org file are automatically converted into a custom ~<LinkPeek>~ component, which can be styled to provide rich link previews. If a URL is detected without a description (e.g., just `https://google.com`), it will be transcoded into:
#+begin_src html
<LinkPeek href="https://google.com"></LinkPeek>
#+end_src
This ensures that even plain links get special treatment, and the necessary component import is added automatically.

**Tables**
Org tables are converted to clean Markdown table format instead of HTML:
#+begin_example
| Name  | Age | City     |
| Alice | 30  | New York |
| Bob   | 25  | London   |
#+end_example
becomes:
#+begin_example
| Name | Age | City |
| --- | --- | --- |
| Alice | 30 | New York |
| Bob | 25 | London |
#+end_example

**Literal Characters**
The exporter ensures that apostrophes, quotation marks, and en dashes are exported as literal characters instead of HTML entities (~&rsquo;~, ~&#x2013;~, etc.), keeping the Markdown source clean.

* Customization

You can customize the exporter's behavior using ~M-x customize-group~ and selecting ~org-export-astro~.

- ~org-astro-known-posts-folders~ :: A list of your frequently used destination folders, each with a convenient nickname. This list is used to prompt you for a destination when exporting.
  Example:
  #+begin_src emacs-lisp
  '(("socratic" . "/path/to/project-a/src/content/blog")
    ("jaydocs" . "/path/to/project-b/src/content/blog"))
  #+end_src

- ~org-astro-default-author-image~ :: Sets a default path for the author's image if one is not specified in the Org file.

- ~org-astro-date-format~ :: A string to control the format of the ~publishDate~ in the front matter.
