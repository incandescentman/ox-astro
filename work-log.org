#+TITLE: ox-astro Work Log
#+AUTHOR: Jay Dixit & Claude
#+DATE: 2025-10-17

* 2025-10-20 Monday - Stage 3: Render Map + Hero Cleanup

** Summary
Completed the exporter refactor by precomputing render data, simplifying transcoders to read from that map, and deleting all hero-suppression branches.

** Changes
- Built a render map (`org-astro--build-render-map`) that packages imports and JSX snippets for each processed image and stored it via `:astro-render-map`/`:astro-render-imports`.
- Simplified `org-astro-prepare-images-filter`, `org-astro-body-filter`, and the MDX transcoders (`org-astro-link`, `org-astro-paragraph`, `org-astro-plain-text`, final output filter) to look up render records instead of reconstructing data or skipping the first image.
- Removed hero-specific imports/filters so every image is emitted uniformly; layout code can now decide how to present hero media.

** Impact
- Rendering is now deterministic: every phase reads the same precomputed JSX, eliminating duplicated logic and hero-based conditionals.
- Imports are generated once from the render map, preventing drift between filters and body generation.
- The exporter exports all images verbatim, relying on downstream layout for hero presentation as intended.

** Next Steps
- Monitor layout consumers for styling adjustments now that hero suppression is gone.
- Consider adding regression fixtures that assert multiple render-map lookups (links, raw paths, markdown images) produce consistent output.

* 2025-10-20 Monday - Stage 2: Image Materialization Drivers

** Summary
Hooked the manifest into a dedicated processing pipeline that materializes images, rewrites source paths via targeted helpers, and threads the resulting state through a reusable export context.

** Changes
- Added `org-astro--materialize-image` and `org-astro--process-image-manifest` to split filesystem work from buffer rewrites and return structured results for downstream consumers.
- Updated `org-astro-export-to-mdx` to build the manifest, invoke the new driver, refresh the export environment after rewrites, and cache the context on `info` for subsequent phases.
- Rewrote `org-astro-prepare-images-filter` to reuse the cached context (or lazily build one) instead of re-scanning the buffer, ensuring filters operate on the same processed data without global state churn.

** Impact
- File copying, remote downloads, and org-buffer rewrites now live in focused helpers, eliminating the previous mix of responsibilities inside the export filter.
- The export context (`:astro-export-context`) carries manifest and processed entries forward, so later stages no longer rely on duplicative scans or the global fallback.
- Buffer updates occur exactly once during preflight; subsequent export passes simply consume the processed data, keeping the pipeline deterministic.

** Next Steps
- Stage 3: Generate a render map (imports + JSX snippets) from the processed entries, have transcoders fetch precomputed JSX, and remove hero-image suppression from the exporter.

* 2025-10-20 Monday - Stage 1: Image Manifest Collector & Context Seeds

** Summary
Implemented the first stage of the refactor plan by introducing a single-pass image manifest that centralizes discovery, records metadata, and seeds an explicit export context.

** Changes
- Added `org-astro--build-image-manifest` in `ox-astro-image-handlers.el` to capture every image reference (links, raw paths, paragraph repairs, buffer scans) as structured entries with occurrence metadata.
- Updated `ox-astro.el` and `ox-astro-handlers.el` preflight/filter logic to consume the manifest, cache it on the export `info` plist, and derive path lists from the manifest rather than re-scanning via ad-hoc helpers.
- Adjusted `org-astro--collect-images-from-tree` to delegate to the manifest builder, keeping existing callers working while ensuring all discovery flows through the new collector.

** Impact
- Image detection now runs through a single code path, ensuring preflight and export filters share the same discovery logic and metadata.
- The manifest (including occurrence descriptors) is stored on `info`, laying the groundwork for a threaded export context that will replace the current dual global/plist storage.
- Preflight and filter runs no longer juggle separate tree vs. raw scans, reducing divergent behaviour and simplifying future refactors.

** Next Steps
- Stage 2: Use the manifest to drive filesystem copying and buffer rewrites via dedicated helpers that emit canonical asset paths without mixing concerns.
- Stage 3: Replace importer/transcoder reliance on globals with manifest-derived JSX data and drop hero-image suppression from the exporter once layout handling is ready.

* 2025-01-06 Monday - Align Front Matter with Astro 5 IDs

** Summary
Astro 5 now derives `slug` internally from each file path, so the exporter should stop emitting a redundant `slug` field in MDX front matter while still preserving slugs for filenames and asset folders.

** Changes
- Removed the `slug` entry from the data returned by `org-astro--get-front-matter-data`.
- Updated `test-slug-generation.org` to document that front matter no longer includes `slug` even though filenames still do.
- Added a change-log entry noting the new front matter contract.

** Impact
- Exported MDX files match the streamlined schema consumed by `roam-life-web`.
- `astro check` passes without `slug` validation errors, while slug-dependent image and PDF handling continues to work.

** Follow-ups
- Run a batch export of representative notes to ensure no consumers depend on `slug` being present in YAML.
- Consider adding an automated assertion within `test-export.el` for front matter keys.

* 2025-01-06 Monday - Restore Hero Images in Exported Content

** Summary
The image exporter was skipping the first entry entirely to avoid duplicate hero output, which also removed the image from the generated `# Images` section in the MDX. Dropped the suppression branch so hero assets render wherever the Org file references them.

** Impact
- All inline `[[file:...]]` references now render `<Image />` components, including the first occurrence.
- `# Images` sections once again list every linked image.

** Follow-ups
- If duplicate hero output becomes distracting, consider handling it in the Astro layout instead (e.g., hide the first `<Image />` via CSS when the hero front matter is present).

* 2025-01-06 Monday - Image Pipeline Deep Dive

** Summary
Reviewed the current image-export pipeline (preflight collection, asset copying, buffer mutations, rendering) to surface maintenance pain points and outline simplification ideas.

** Findings
- Image discovery happens three different ways (tree traversal, raw buffer scan, paragraph repair), each mutating shared globals. This redundancy keeps behavior robust but makes the flow hard to follow and reason about.
- Two mutable stores (`info :astro-body-images-imports` and `org-astro--current-body-images-imports`) try to keep the same data in sync. When they drift, downstream code falls back to guesses.
- “Hero image suppression” leaked into multiple layers (link transcode, paragraph repair) causing special-case branches and state flags.
- The asset-copy helpers mix responsibilities: they rewrite paths in-place, manage filesystem copies, and emit final MDX imports all in one pass.

** Opportunities
- Centralize image discovery into a single collector that returns structured entries (source, target, metadata) and reuse it across later phases.
- Replace global state with an explicit context object threaded through export steps, so each phase reads/writes predictable fields.
- Separate concerns: one module copies/updates assets, another maps discovered images to MDX `import` entries, and the renderer only formats JSX.
- Defer hero-specific behavior to the layout layer (or a post-processing step) instead of branching inside the exporter.

** Next Steps
- Prototype a refactored collector/context on a branch and run regression exports against representative notes.
- Add focused tests for the new collector to ensure raw-path edge cases remain covered.

** Implementation Plan
1. Prototype a unified image collector that returns structured results and stores them in an explicit export context. Run regression exports against representative notes.
2. Split asset copying, buffer rewriting, and MDX import emission into focused helpers that consume the shared context.
3. Remove hero-specific branching from the exporter and handle duplicate hero presentation inside the Astro layout instead.
4. Add targeted fixtures and tests that exercise raw-path edge cases to guard the refactored pipeline.
** Handoff
- Pick up the unified collector/context prototype (Step 1 of implementation plan).
- Validate layout-side hero handling to ensure we don't reintroduce suppression logic in the exporter.
* 2025-10-24 Friday - Enrich org-roam Metadata Export

** Summary
Taught the exporter to surface the full set of org-roam enrichment fields (date occurred, era, place, people, emotions, places, themes, story type) so downstream sites like roam-life-web can drive richer navigation and search experiences.

** Changes
- Added `ox-astro-metadata.el` helpers for parsing/normalizing list-style keywords (handles quoted tokens, optional `ASTRO_` prefixes, and story type validation).
- Registered the new keywords in `ox-astro.el` and wired `org-astro--get-front-matter-data` to emit `dateOccurred`, `era`, `place`, `people`, `emotions`, `places`, `themes`, and `storyType` when present.
- Updated the change log with guidance for validating org frontmatter slugs and array fields.
- Rebuilt `org-astro--split-quoted-list` as a small state machine to avoid parenthesis mismatches and correctly tokenize quoted/whitespace-separated values.

** Impact
- MDX frontmatter now mirrors the enriched schema expected by `roam-life-web/src/content/config.ts`.
- Arrays such as `people`/`emotions` are always emitted as trimmed lists, preventing schema validation errors.
- Authors can keep using either `#+field` or `#+ASTRO_field` conventions without breaking exports.

** Follow-ups
- Run a regression export on representative stories and characters to confirm real data covers the new fields.
- Consider adding ERT fixtures that exercise the parser against the sample org files mentioned in the exporter guide.

** Handoff for Next Session
- Please run exports for the sample notes to catch any lingering schema issues, especially around `place` vs `places`.
- If time permits, add an ERT fixture covering `org-astro--split-quoted-list` with mixed quoted tokens.
- Review `docs/instructions.org` metadata section for clarity; expand with screenshots if users stumble.

* 2025-10-17 Thursday - Org Headings Breaking User Blocks

** Summary
Fixed a critical parsing issue where org-mode heading syntax (`***`, `****`) inside user/prompt/quote src blocks was breaking the block structure during export, resulting in malformed MDX output.

** Problem Discovery

*** Symptom
MDX blog post [[/Users/jay/Library/CloudStorage/Dropbox/github/astro-monorepo/apps/socratic/src/content/blog/wherein-chatgpt-helps-me-launch-this-substack.mdx][wherein-chatgpt-helps-me-launch-this-substack.mdx]] had content breaking out of styled "user" bubbles. Instead of rendering inside the CSS-styled code block, markdown headings and lists were rendering as page-level elements.

*** Root Cause
The exported MDX contained `\#+begin_src_ user` (escaped/literal text) instead of proper triple backticks. This happened because the org-mode source file [[/Users/jay/Library/CloudStorage/Dropbox/roam/socratic/20250825182342-wherein_chatgpt_helps_me_launch_this_substack.org][20250825182342-wherein_chatgpt_helps_me_launch_this_substack.org]] had org heading syntax inside the src blocks:

#+begin_example
#+begin_src user
OK here are my thoughts...

*** 1. Clarify your audience

#### Who do you want reading this?
#+end_src
#+end_example

Org-mode's parser was interpreting the `***` at line start as actual org headlines, which *broke the src block structure before export even began*.

** Approach to Solution

*** First Attempt: Export-Time Conversion
*Strategy*: Modify `org-astro-src-block` function to convert org headings to markdown during export.

*Implementation*: Added regex replacements in [[/Users/jay/Library/CloudStorage/Dropbox/github/ox-astro/ox-astro-helpers.el][ox-astro-helpers.el]] lines 726-750:

#+begin_src emacs-lisp
(defun org-astro-src-block (src-block contents info)
  "Transcode a SRC-BLOCK element into fenced Markdown format.
For 'user', 'prompt', and 'quote' blocks, preserve org-mode syntax
literally - convert org headings to markdown equivalents."
  (if (not (org-export-read-attribute :attr_md src-block :textarea))
      (let* ((lang (org-element-property :language src-block))
             (code (org-element-property :value src-block)))
        ;; For user/prompt/quote blocks, convert org-mode syntax to markdown
        (when (member lang '("user" "prompt" "quote"))
          ;; Convert org headings to markdown headings
          (setq code (replace-regexp-in-string "^\\*\\*\\*\\* \\(.*\\)$" "#### \\1" code))
          (setq code (replace-regexp-in-string "^\\*\\*\\* \\(.*\\)$" "### \\1" code))
          (setq code (replace-regexp-in-string "^\\*\\* \\(.*\\)$" "## \\1" code))
          (setq code (replace-regexp-in-string "^\\* \\(.*\\)$" "# \\1" code)))
        (setq code (string-trim-right code))
        (format "```%s\n%s\n```" (or lang "") code))
#+end_src

*Problem*: This approach was **too late** - the src block had already been broken during parsing, so there was no intact block structure to process.

*Result*: Still produced malformed output with `\#+begin_src_ user`

*** Second Attempt: Pre-Processing Before Parse
*Strategy*: Run transformation BEFORE org-mode's parser processes the buffer, converting asterisks to markdown heading syntax.

*Why This Works*: Org-mode's parser is what interprets asterisks at line start as headlines. By converting them to markdown syntax (`###`) before parsing, we prevent the parser from seeing them as org elements.

** Final Solution: Automatic Normalization

*** Implementation Architecture

**** 1. Created Normalization Function
Added `org-astro--normalize-user-blocks` in [[/Users/jay/Library/CloudStorage/Dropbox/github/ox-astro/ox-astro-helpers.el][ox-astro-helpers.el]] lines 247-282:

#+begin_src emacs-lisp
(defun org-astro--normalize-user-blocks ()
  "Convert org headings to markdown inside user/prompt/quote blocks.
This prevents org-mode from interpreting asterisks as headings inside
these special blocks, which would break the block structure."
  (save-excursion
    (goto-char (point-min))
    (let ((modified nil))
      (while (re-search-forward "^#\\+begin_src \\(user\\|prompt\\|quote\\)" nil t)
        (let ((block-start (point))
              (block-end (save-excursion
                          (when (re-search-forward "^#\\+end_src" nil t)
                            (match-beginning 0)))))
          (when block-end
            (save-restriction
              (narrow-to-region block-start block-end)
              (goto-char (point-min))
              ;; Convert org headings to markdown (must go from most to least asterisks)
              (while (re-search-forward "^\\(\\*\\*\\*\\*\\) \\(.*\\)$" nil t)
                (replace-match "#### \\2")
                (setq modified t))
              (goto-char (point-min))
              (while (re-search-forward "^\\(\\*\\*\\*\\) \\(.*\\)$" nil t)
                (replace-match "### \\2")
                (setq modified t))
              (goto-char (point-min))
              (while (re-search-forward "^\\(\\*\\*\\) \\(.*\\)$" nil t)
                (replace-match "## \\2")
                (setq modified t))
              (goto-char (point-min))
              (while (re-search-forward "^\\(\\*\\) \\(.*\\)$" nil t)
                (replace-match "# \\2")
                (setq modified t)))
            (goto-char block-end))))
      (when modified
        (message "[ox-astro] Auto-converted org headings to markdown in user/prompt/quote blocks")))))
#+end_src

*Key Design Decisions*:
- Uses `save-excursion` to preserve cursor position
- Processes from most to least asterisks to avoid double-conversion
- Uses `narrow-to-region` to limit replacements to within each block
- Provides user feedback when conversions are made
- Non-destructive to the original buffer (unless export proceeds)

**** 2. Integrated Into Export Workflow
Modified [[/Users/jay/Library/CloudStorage/Dropbox/github/ox-astro/ox-astro.el][ox-astro.el]] line 94 to call normalization BEFORE parsing:

#+begin_src emacs-lisp
;; Clear any stale image import state before running export filters.
(setq org-astro--current-body-images-imports nil)
;; --- AUTO-NORMALIZE: Convert org headings to markdown in user/prompt/quote blocks ---
;; This must run BEFORE org-mode parses the buffer, otherwise asterisks at start
;; of lines inside src blocks will be interpreted as org headlines and break the block.
(org-astro--normalize-user-blocks)
;; --- PREPROCESSING: Process and update all image paths BEFORE export ---
(let* ((tree (org-element-parse-buffer))
#+end_src

*Critical Timing*: This runs **before** `org-element-parse-buffer`, which is when org-mode's parser would normally interpret the asterisks as headlines.

*** Manual Fix Applied
Also manually fixed the source org file [[/Users/jay/Library/CloudStorage/Dropbox/roam/socratic/20250825182342-wherein_chatgpt_helps_me_launch_this_substack.org][20250825182342-wherein_chatgpt_helps_me_launch_this_substack.org]] at lines 187-213 to demonstrate proper format:

#+begin_example
#+begin_src user
OK here are my thoughts on your questions from above. I'll run them by you one at a time.

### 1. Clarify your audience

Before you write anything, ask:

#### Who do you want reading this? Professors? Writers? Students? AI-curious professionals?
#+end_src
#+end_example

** Technical Insights

*** Org Export Pipeline Order
Understanding the correct order of operations was crucial:

1. *Pre-processing* (custom code before parsing) ← Our normalization runs here
2. *Parsing* (`org-element-parse-buffer`) ← Where asterisks would be interpreted
3. *Parse-tree filters* (modify AST)
4. *Transcoding* (convert elements to output format)
5. *Body filters* (modify body string)
6. *Final filters* (modify complete output)

*** Why Export-Time Processing Failed
By the time `org-astro-src-block` was called to transcode the element, org-mode had already:
- Parsed the asterisks as headlines
- Broken the src block structure
- Created malformed AST nodes

The transcoder received an already-broken structure, so it couldn't fix it.

*** Why Pre-Processing Works
By running before the parser:
- We transform the raw buffer text
- Org-mode parser sees markdown syntax (`###`) not org syntax (`***`)
- Src block structure remains intact through parsing
- Export proceeds normally with well-formed blocks

*** Conversion Order Matters
Must process from most to least asterisks:
- `****` → `####` (first)
- `***` → `###`
- `**` → `##`
- `*` → `#` (last)

Otherwise `****` would become `###*` after the first pass.

** Prevention Strategy

*** User Experience
The automatic normalization provides:
1. **Zero friction**: Users don't need to remember special syntax
2. **Automatic correction**: Problematic syntax is fixed on every export
3. **User notification**: Message confirms when conversions are made
4. **No manual intervention**: Works transparently in the background

*** Alternative Options Considered
1. ✅ *Automatic pre-processing* (implemented) - Best UX
2. ⚠️ *Export-time warning* - Requires user action
3. ⚠️ *Documentation* - Relies on user memory

Chose Option 1 for optimal user experience and reliability.

** Files Modified

*** [[/Users/jay/Library/CloudStorage/Dropbox/github/ox-astro/ox-astro-helpers.el][ox-astro-helpers.el]]
- Lines 247-282: Added `org-astro--normalize-user-blocks` function
- Lines 726-750: Updated `org-astro-src-block` with heading conversion (this became redundant but kept as defense in depth)

*** [[/Users/jay/Library/CloudStorage/Dropbox/github/ox-astro/ox-astro.el][ox-astro.el]]
- Line 94: Integrated normalization call before parsing

*** [[/Users/jay/Library/CloudStorage/Dropbox/roam/socratic/20250825182342-wherein_chatgpt_helps_me_launch_this_substack.org][Source org file]]
- Lines 187-213: Manually fixed as demonstration of proper format

** User Impact

*** Immediate Benefits
- Blog post now renders correctly with content staying inside styled bubbles
- No more escaped literal text in MDX output
- Proper triple-backtick code fences generated

*** Long-Term Benefits
- Users can freely use conversational markdown syntax inside user blocks
- No need to remember special escaping rules
- Automatic handling prevents future issues
- Works for all three block types: user, prompt, quote

** Lessons Learned

*** 1. Pre-Processing vs Post-Processing
When working with structured parsers like org-mode:
- Some problems must be solved BEFORE parsing
- Post-processing (during export) can be too late
- Understanding the pipeline order is critical

*** 2. Defensive Programming Layers
Multiple intervention points provide robustness:
- Pre-processing catches the issue early (primary defense)
- Export-time conversion provides backup (defense in depth)
- Both together ensure reliable output

### 3. User Experience Design
Best solutions:
- Work automatically without user intervention
- Provide feedback when taking action
- Don't require users to memorize special rules
- Fix problems at the source, not with workarounds

*** 4. Testing with Real Content
The problem was discovered in a real blog post with complex conversational content, not in simplified test cases. Real-world content reveals edge cases that simple tests miss.

** Status
✅ **RESOLVED** - Automatic normalization implemented and integrated. Future exports will handle this automatically.
